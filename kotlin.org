* function
  fun <name> define a function

  function return has two syntax: 
  - fun <name>(): <Type> { return <value>}
  - fun <name>() = <value>

  function can set default argument

  function can call with named argument

  lamabda syntax: (<variable>: <Type>, ...) -> <body>

  <type>.<name>(<arg1>, ...) {<body>}, define a extension function, use this in function to reference real instance

  extension function resolve statically(means by decalre type)

  extension function literal, e. Int.() -> Boolean, means a extension function from Int to Boolean,
  Int.(Int) -> Boolean, a function from int int to Boolean

  extension function literal, in body can direct call method on extented object, this also work
* string
  """ enclosed is raw string, not escape any char in it

  " and """ enclosed string can use string template, use $<varaible> in string to reference variable

* class
  data class <name>(<val|var> <varaible>: <Type>,...) decalre a calss with constructor and getter/setter(for var), also add hashCode() equals() toString()

  data class support destructuring, e.g.  val (name, age) = person
** Property
   use val/var decalre properties
   
   var <proeprtyName>[: <PropertyType>] [= <property_initializer>]
     [<getter>]
     [<setter>]

   get () = <body>
   
   set (value) { <body> }

   private set, only change visibility, not change default implement

   Fields cannot be declared directly in class, but for property it provides automatically

   keyword field used in property to reference backing fields

** Const
   const, compile time constats, can used in annotation:
   - need place in object/companion object
   - must init with String or primitive type
   - no custom getter
   
** Lazy initialized
   late-initialized properties, use keyword lateinit

   use .isInitialized to check late latinit var is initialized

** Delegated properties
   val/var <property name>: <Type> by <expression>

   expression type:
   - lazy
   - observable
   - map
   - custom
* Null Safety
  <type>? means nullable type

  compiler will given error call function on nullable value

  if check variable(immutable) not null, then compiler will assume it not null and allow you call function on it

  ?. safe call function, is variable is null then return null

  ?. can used in assignment, if any varaible is null, assignment skip, and right side not execute

  ?.let if varaible is not null, execute code inside let block

  ?:, if varaible not null return varaible, otherwise return right side value, right side value only evaluate only left side is nullable

  !!, convert varaible to not null, then call it, if it is null, NPE throw

  as?, safe cast, if cast fail return null

  filterNotNull, a function on collection, easy way to filter out nullable value
* when
  smart cast syntax, after is, <varaible> type auto cast to <type>:

  when(<varaible>) {
  is <type> ->
  }
* Object Expressions
  object : <type>() { ... } create an anonymous class inherits <type>
  
  when aobject implements a SAM interface(one with a Single Abstract Method), can pass a lamabda instead
* Collection
  kotlin not create new collection type, reuse all java collection

  kotlin provide useful function to java collections

  - toSet
  - toList
  - filter
  - map
  - any
  - all
  - count
  - find
  - flatMap
  - max
  - minBy
  - sorted
  - sortedBy
  - sum
  - sumBy
  - groupBy
  - partition
  - fold
* Operator overloading
  use operator fun <name> to implememnt operator overloading
  | Expression     | Tranlated to                 |
  | +a             | a.unaryPlus                  |
  | -a             | a.unaryMinus                 |
  | !a             | a.not()                      |
  | a++            | a.inc()                      |
  | a--            | a.dec()                      |
  | a + b          | a.plus(b)                    |
  | a - b          | a.minus(b)                   |
  | a * b          | a.times(b)                   |
  | a / b          | a.div(b)                     |
  | a % b          | a.rem(b)                     |
  | a..b           | a.rangeTo(b)                 |
  | a in b         | b.contains(a)                |
  | a !in b        | !b.contains(a)               |
  | a[i]           | a.get(i)                     |
  | a[i,j]         | a.get(i,j)                   |
  | a[i_1,...,i_n] | a.get(i_1,...,i_n)           |
  | a[i] = b       | a.set(i, b)                  |
  | a()            | a.invoke()                   |
  | a(i)           | a.invoke(i)                  |
  | a += b         | a.plusAssign(b)              |
  | a == b         | a?.equals(b) ?: (b === null) |
  | a > b          | a.compareTo(b) > 0           |
  | a >= b         | a.compareTo(b) >= 0          |


* Syntax
  A.run {}, in block this will refer to A, block result will be run result (transformation function)
  A.let {a -> }, in block a will be A, block result will be let reult (transformation function)
  A.apply {}, in block this will refer to A(mutation function)
  A.also {a -> }, in block a will be A(mutation function)
* Coroutines
  GlobalScope.launch{ CoroutineScope -> }, create a Global Coroutine call, code in block will run in coroutine context
  GlobalScope.launch is a daemon thread, it will not prevent jvm exit
  GlobalScope.launch return a job object, job.join will block until launch code execute finish(coroutine block, not normal block)
  runBlocking{CoroutineScope -> }, execute code in coroutine context, it will block until inner code execute finish
  delay is a non blocking sleep, only can exist on coroutine execute context, it will block runBlocking
  launch {}, execute coroutine in current Coroutine context
  coroutineScope {CoroutineScope -> }, create a new routine scope and does not complete until all launched children complete
  suspend is a key word modifier a method can run in coroutineScope, can call delay
  launch {} also return a job object, job.cancel() cancel job, job.join() wait job finish, job.cancelAndJoin() cancel job and wait it finish
  all suspending function in kotlinx.coroutines are cancellable
  computation code is not cancellable, there a two ways make it cancellable:
  1. periodically invoke a suspending function to check cancellation, e.g yield
  2. explicity check cancellation status isActive
  cancellation will throw CancellationException, it auto handle by runBlocking, you can use try finally in launch code block
  attempt use suspending function in finally block on launch will cause CancellationException, if need suspending function in finally block, use withContext(NonCancellable) {}
  withTimeout(time) {}, run in runBlocking, will cancel code in second argument when exceed time by throw TimeoutCancellationException
  withTimeoutOrNull, not throw exception but return null when timeout
  Deferred value is a convenient way to transfer value bewtten corountines
  Channels provice a way to transfer a stream of value, send is suspending set value, receive is suspending get value
  channel can be close, receive side use for to get all value, when close for exist
  produce {}, easy to generate a channel produce side, then use consumeEach in consume side
  pipeline use to combiner channel, can handle infinit channel
  buildIterator also can build pipeline, buildIterator {}, yield replace send, next replace receive
  fan-out: if one channel pipe to multiple channel, the produce channel gnerate value will only consume by one channel in for loop, in consumeEach always consumes(cancels) the underlying channel
  fan-in: one channel can receive multiple send 
  default channel is no buffer, send is suspend until has receive, receive suspend until has send, channel and produce accept a capacity arugment to set buffer size
  Ticker channels, use ticker() to create a time based producer, delayMillis control two value get minim duration, initialDelayMillis controll first value delay
  async is like launch, but it run concurrently and return a Deferred, by set start = CoroutineStart.LAZY let code in async lazy calculate
  deffer value await(), same as delay block get deffer value, need in runBlocking
  don't split async execute, if any exception outside CoroutineContext, the async will continue run, let all async operation in CoroutineScope, any exception will cancel whole CoroutineScope execute, this cancellation will propagated to child context
  CoroutineContext contain a croutine dispatcher that determines waht thread or threads to execute coroutine code
  launch and async accept a argument set CoroutineDispatcher
  Unconfined is a special dispatcher, it will default use current context dispacher, but after delay, it will switch to DefaultExecutor
  -Dkotlinx.coroutines.debug  used for debug, when pass this argument to vm, Thread.currentThread().name will append a coroutine info
  withContext will siwtch execute context
  xx.use execute code then close xx
  launch will extend parent CoroutineContext to a new child CoroutineContext, when parent cancellation it also cancellation. GlobalScope.launch not affect by outside CoroutineContext cancellation
  launch will auto waiting all child finish work, no need explicity call join on child
  CoroutineName can change corountine name info
  by extend oroutineScope then prodive a coroutineContext implement, this implmement return a Distatchers.Default + job, when start create a job, when stop cancel job, then you can use any coroutine in this class, all corountine will cancel when job cancel
  ThreadLocal and asContextElement let you use threadLocal value in coroutine context
  Coroutine builder come in two flavors: propagateing exceptions automatically(launch and actor), exposing them to users(async and produce)
  CoroutineExceptionHandler is used as generic catch block of coroutine, it is invoked  only on exceptions which are not expected to be handled by user
  Cancelling wihout cause ia a mechanism for parent to cancel its children without cancelling itself
  if coroutine encouter exception other than CancellationException, it cancles its parent with that exception, this behaviour cannot be overriden
  exception handler work when all child coroutine terminate
