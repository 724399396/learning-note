* basic
  same machine multiple emulator can use port to dial each other

  Resouce has kinds of type:
  - String, define in res/values/*.xml, then use string/<name> reference, in java file use R.string.<name> reference
  - Layout file, define in res/layout/*.xml, in java file use R.layout.<name> reference, res/layout-land is for land mode
  
  on application must has least one Activity

  AndroidManifest.xml is for create apk(Android package)

  AndroidManifest.xml declartion permission:
  - <uses-permission>, require when install app
  - <permission>, protect self permission
  
  Android mutliple thread is based on java, only UI thread(Main thread) can update ui, use View.post or Activity.runOnUIThread to commit change to UI thread

  Logcat is standard log util, use Log.<level>(<tag>, <message>) to log

  Notifycation show message on top bar, new NOtification.Builder.setXXX().build -> getSystemService(NOTIFYCATION_SERVICE).notify

  getResources().getIdentifier(<name>, <type>, <package name>) get resource from app/res/values

  use compatiblity class in support library to support old version

  Back button(in bottom function bar) and Up botton(<-) is different thing:
  - back button, provides navigate to screen that most recently viewd
  - up botton, navigation from child to parent
  
  LayoutInflater convert a xml definition to View class

  onSizeChanged is called when view size change
** Notification
   Starting with Android 8.0 (API level 26), your code can assign each of your app's notifications to a user-customizable notification channel

   use NotificationManager to create notification channel, send notification

   use NotificationCompat.Builder to create Notification

   Notification can be cancel/update

   notification can contain action button, then use NotificationReceiver to reponse to this button
** AlarmManager
   launch and repeat repeat a PendingIntent at specified time

   AlarmManager once/period send Broadcast Intent

   AlarmManager not work when device is in Doze mode, if need ensure, use setAndAllowWhileIdel/setExtractAndAllowWhileIdle, or use WorkManager API

** Shared preferences
   Shared preferences allow you to store small amounts of primitive data as key/value pairs in a file on the device

   this file is accessible to all the components of your app, but is not accessible to other apps

   shared preference even if your app stop and restarts, or if the device reboots

   use Activity instance.getSharedPreferences(filename, mode) get Shared preferences

   save data in onPause

   get Preferences.Editor to edit preference

   editor apply save preference asynchronously, commit save sycnrhonously but discouraged
** App Setting
   res/xml contain SwitchPreference

   com.android.support:preference-<version> include PreferenceFragmentCompat, is compatible version for PreferenceFragment
** JobScheduler WorkManager
   JobScheduler only available on API 21 an higher, for compatibility, use WorkManager
*** JobScheduler
    system automatically execute JobService when condition match
    
    onStartJob:
    - called when system determinies you task should run
    - return boolean indicate whether job need run a separate thread, true means work on different thread, your app call jobFinished() explicity, false means job is completed by end of onStartJob(), system call jobFinished()
    
    onStopJob:
    - if conditions described in JobInfo no longer met, job stop and this method be called
    - return boolean determines what to do if job not finish, true will rescheduled, otherwise dropped
    
    use JobInfo set condition, e.g. NetworkStatus Idle Charging
   
    JobScheduler not ensure call when condition match, can set a DeadLine force it execute ignore condition
    >>>>>>> android
** Recommended Architecture Components
   [[./android_archeticture_component.png]]

   - Entity: In the context of Architecture Components, the entity is an annotated class that describes a database table.
   - SQLite database: On the device, data is stored in an SQLite database. The Room persistence library creates and maintains this database for you.
   - DAO: Short for data access object. A mapping of SQL queries to functions. You used to have to define these queries in a helper class. When you use a DAO, your code calls the functions, and the components take care of the rest.
   - Room database: Database layer on top of an SQLite database that takes care of mundane tasks that you used to handle with a helper class. The Room database uses the DAO to issue queries to the SQLite database based on functions called.
   - Repository: A class that you create for managing multiple data sources. In addition to a Room database, the Repository could manage remote data sources such as a web server.
   - ViewModel: Provides data to the UI and acts as a communication center between the Repository and the UI. Hides the backend from the UI. ViewModel instances survive device configuration changes.
   - LiveData: A data holder class that follows the observer pattern, which means that it can be observed. Always holds/caches latest version of data. Notifies its observers when the data has changed. Generally, UI components observe relevant data. LiveData is lifecycle-aware, so it automatically manages stopping and resuming observation based on the state of its observing activity or fragment.
   
   [[https://codelabs.developers.google.com/codelabs/android-training-livedata-viewmodel/index.html?index=..%2F..android-training#0]]

   create Entity by use android.arch.persistence.room annotation, e.g. @Entity @PrimaryKey @ColumnInfo

   create Dao by use android.arch.persistence.room annotation, e.g. @Dao @Insert @Query @Delete

   LiveData is under android.arch.lifecycle, create neccessary code to react with database change

   extends RoomDatabase and Annotation with @Database to implement Room database, usally only need on instance, room execute on separte thread

   extends AndroidViewModel to create ViewModel

   ViewModel wraning:
   - Never pass context into ViewModel instances.
   - Do not store Activity, Fragment, or View instances or their Context in the ViewModel.
   
   use ViewModelProviders.of to get ViewModel instance, when activity first create it create ViewModel, when it re-create it return existing ViewModel

** Widget
   a widget is belong to app, display in home screen

   a app can have mutliple widgets

   [[https://codelabs.developers.google.com/codelabs/advanced-android-training-widgets/index.html?index=..%2F..advanced-android-training#3]]
   
   a widget can update by 2 ways, both way send a broadcast intent with action ACTION_APPWIDGET_UPDATE:
   - define interval in widget's provider-info
   - request widget update explicitly
   
   android:updatePeriodMillis min time is 1800000

*** Lifecycle
    -onEnabled, when first widget add to user screen called, even if add mutliple widgets, only call once
    -onDisabled, when last wiget delete from user screen
** Sensor Manager
   getSystemService(Context.SENSOR_SERVICE) get SensorManager

   sensorManager.getSonsorList(Sensor.TYPE_ALL) get device all sensor

   sensorManager.getDefaultSensor(type) get speical type sensor

   when sensor data change, android sensor framework generate a SensorEvent, can registry SensorEventListener to receive

   listen on sensor data change consume battery, so don't listen on OnCreate, registry/onRegistry in start/stop

**** sensor based orientation
     1. listen on Sensor.TYPE_ACCELEROMETER and Sensor.TYPE_MAGNETIC_FIELD
     2. get value accelerometer and magnetometer
     3. SensorManager.getRotationMatrix(rotationMatrix, null, accelermeterData, magnetometer)
     4. SensorManager.getOrientation(rotationMatrix, oritantionValue)
     
     three angle means, value from  -π (-3.141) to π:
     - Azimuth: The direction (north/south/east/west) the device is pointing. 0 is magnetic north.
     - Pitch: The top-to-bottom tilt of the device. 0 is flat.
     - Roll: The left-to-right tilt of the device. 0 is flat.

     for match rotate device, use windowManager.getDefaultDisplay to get device rotation then use SensorManager.remapCoordinateSystem to convert rotationMatrix
** Language support
   android studio provide a translator editor for strings.xml

   start end is used replace left/right to work both in LTR(left to right) and RTL(right to left) language, need set android:supportsRtl to ture in <application>

   java.text.DateFormat.getDataInstance().format/parse use user choose locale format date

   java.text.NumberFormat.getInstance(), format/parse number use user choose locale

   java.text.NumberFormat.getCurrencyInstance(), format/parse currency use user choose locale

   Locale.getDefault(), get user selected locale
** Accessibility
   TalkBack is android buil-in screen reader
** Dynamic request permission
   Starting with Android 6.0 (API level 23), it's not always enough to include a permission statement in the manifest. For "dangerous" permissions, you also have to request permission programmatically, at runtime.

   ActivityCompat.checkSelfPermission(activity, permission) to check permission

   ActivityCompat.requestPermissions(activity, permissions) to request permission

   override onREquestPermissionsResult to receive get permission result
** Device Location
   FusedLocationProviderClient, depend on Google Play service

   fix 64k method problem:
   [[https://developer.android.com/studio/build/multidex]]

   add permission ACCESS_COARSE_LOCATION/ACCESS_FINE_LOCATION in AndroidManifest

   LocationService.getFusedLocationProviderClient, get FusedLocationProviderClient

   fusedLocationProvider.getLastLocation() get last known location

   Geocoder.getFromLocation, reverse goecoding lat/lng to address

   fusedLocationProvider.requestLocationUpdates(request, callback, lopper) start request location update
*** Places API
    register on google developer console, use package name and SHA1 key create a api key

    import  com.google.android.gms:play-services-places
** Google Maps
    register on google developer console, use package name and SHA1 key create a api key
    
    create from android studio select google map activity
    
    google_maps_api.xml, this file hold API key

    acitivty_maps.xml, single fragment fill entrie screen
** Custom View
   extend from already exist View, then extend all constructors
   
   in layout file use full package name reference custom view

   - To create a custom view of any size and shape, add a new class that extends View.
   - Override View methods such as onDraw() to define the view's shape and basic appearance.
   - Use invalidate() to force a draw or redraw of the view.
   - To optimize performance, assign any required values for drawing and painting before using them in onDraw(), such as in the constructor or the init() helper method.
   - Add listeners such as View.OnClickListener to the custom view to define the view's interactive behavior.
   - Add the custom view to an XML layout file with attributes to define its appearance, as you would with other UI elements.
   - Create the attrs.xml file in the values folder to define custom attributes. You can then use the custom attributes for the custom view in the XML layout file.
** Canvas
   - To draw on the display of a mobile device with Android you need a View, a Canvas, a Paint , and a Bitmap object.
   - The Bitmap is the physical drawing surface. The Canvas provides an API to draw on the bitmap, the Paint is for styling what you draw, and the View displays the Bitmap.
   - You create a Bitmap, associate it with a View, create a Canvas with a Paint object for the Bitmap, and then you can draw.
   - You must invalidate() the view when your are done drawing, so that the Android System redraws the display.
   - All drawing happens on the UI thread, so performance matters.
   - A common pattern for working with a canvas is to create a custom view and override the onDraw() and onSizeChanged() methods.
   - Override the onTouchEvent() method to capture user touches and respond to them by drawing things.
   - The Context of an activity maintains a state that preserves transformations and clipping regions for the Canvas.
   - Use canvas.save() and canvas.restore() to draw and return to the original state of your canvas.
   - To draw multiple shapes on a canvas, you can either calculate their location, or you can move (translate) the origin of your drawing surface. The latter can make it easier to create utility methods for repeated draw sequences.
   - Clipping regions can be any shape, combination of shapes or path.
   - You can add, subtract, and intersect clipping regions to get exactly the region you need.
   - You can apply transformations to text.
** Surfaceview
   allow drawing on different threads
   - To offload drawing to a different thread, create a custom view that extends SurfaceView and implements Runnable. The SurfaceView is part of your view hierarchy but has a drawing Surface that is separate from the rest of the view hierarchy.
   - Create an instance of your custom view and set it as the content view of your activity.
   - Add pause() and resume() methods to the SurfaceView that stop and start a thread.
   - Override onPause() and onResume() in the activity to call the pause() and resume() methods of the SurfaceView.
   - If appropriate, handle touch events, for example, by overriding onTouchEvent().
   - Add code to update your data.
   - In the SurfaceView, implement the run() method to:
   - Check whether a Surface is available.
   - Lock the canvas.
   - Draw.
   - Unlock the canvas and post to the Surface.
* 4 fundamental components:
  - Activity, for UI
  - Service, run on background
  - BroadcastReceiver, publish/subscriber pattern
  - ContentProvider, store share data across application
** Activity
*** Lifecycle
    [[./activity_lifecycle.png]] 
   

    onRetianNonConfigurationInstance(), used to calculate time consuming value, called on onStop/onDestory, getLastNonConfigurationInstance() get privouse calculate value, called on OnCreate

    screen rotate is a confugration change, active will re-create

    onCreate(Bundle)/onRestoreInstanceState(Bundle), this parameter is from override method onSaveInstanceState(), this method call between onPause and onStop, means later this active maybe destroyed/recreate, this data is only save in current app session

    Intent, some of View value auto keeped when active re-create
*** Fragment
    one activity can has multiple fragement, display different content

    fragment lifecycle is similar as activity, but in fine-grained

    when activity destoryed and recreated, Fragment is not destroyed

    onCreateView method return inflater.inflate(layout id) to render fragement layout file

    attach fragment to activity way:
    - declare in layout file
    - dynamic add to activity:
      * get from FragmentManager
      * create FragmentTranscation
      * attach to Activity
      * commit FragmentTranscation
    - use dialogFragment instance show method
**** lifecycle:
     - The system calls onAttach() when a Fragment is first associated with an Activity. Use onAttach() to initialize essential components of the Fragment, such as a listener.
     - The system calls onCreate() when creating a Fragment. Use onCreate() to initialize components of the Fragment that you want to retain when the Fragment is paused or stopped, then resumed.
     - The system calls onCreateView() to draw a Fragment UI for the first time. To draw a UI for your Fragment, you must return the root View of your Fragment layout from this method. You can return null if the Fragment does not provide a UI.
     - When a Fragment is in the active or resumed state, it can access the host Activity instance with getActivity() and easily perform tasks such as finding a View in the Activity layout.

**** dynamic fragement
     - declare <FrameLayout> in activity layout file
     - getSupportFragmentManager()
     - beginTransaction -> modify -> commit()
    
     use Adapater is common pattern for presenting different screens of content with an Activity

     use replace(android.R.id.content, <Fragment>) to replace active to fragement content

     fragement.setArgument(bundle), receive bundle, then this bundle is available in fragement.getArguments()
**** static fragement
     fragement can static add in activity, used <fragement> element in activity layout file, android:name to Fragment class file, tools:layout to layout file
     
     static fragement is reused component way
*** parent-child
    activity can declare parent in AndroidManifest.xml file, use android:parentActivityName declare, for compatible older version(api less 16), need add meta-data android.support.PARENT_ACTIVITY

    child activity auto has a up button (<-) in app bar, click will return to parent activity

*** Intent
    startActive/startActiveForResult to use intent start activity

    startActive/startActiveForResult , used to create another active in a active, need pass Intent arg, has two way match activity:
    - explicity set by Intent
    - match by intent-filter in AndroidManifest.xml

    intent used in setResult, and then can get from onActivityResult

    Intent is pass in activity:
    - Intent.xx, set action
    - Data
    - Category
    - Type(MIME)
    - Component, set jump location
    - Extra
**** Intent data pass:
     - data, a url argument
     - extras, key/value pairs in a Bundle
**** Explicit Intent
     take two parameter, first is from activity class, second is to activity class

     return from activity to call it acvitiy, no paramater

**** Implicit Intent
     Activity decalre it can received Intent in AndroidManifest.xml by Intent Filter

     take two paramater, an action and data

     use intent.resolveActivity(getPackageManager()) to find handle acvitiy

     ShareCompat.IntentBuilder is a easy way create share intent

     android.intent.action.MAIN intent is for entry activity

     inner actions:
     - Intent.ACTION_VIEW
     - Intent.ACTION_EDIT
     - Intent.ACTION_DIAL
** Service
   - NOTIFYCATION_SERVICE
   - ALARM_SERVICE
   - AUDIO_SERVICE:
     * SoundPool
     * MediaPlayer
     * MediaRecord
     * SensorManager
     * SensorEvent
** BoardcastReceiver
   constructor instruction:
   1. register service
   2. generate and send board intent
   3. onReceive handle event and delegate
   4. receiver onReceive
   
   starting from android 8.0(api 26), most android system broadcasts can't register by statically way

   Boardcast Intent is diffrent from activity Intent, best practice is use BuildConfig.APPLICATION_ID + message name
   
   registry way:
   - statically, AndroidManifest.xml <receiver> tag add <intent-filter>
   - dynamically, use registerReceiver(receiver, intentFilter) to regist, when activity/server destory, need unRegisterReceiver
   
   custom broadcasts:
   - Normal broadcasts, asynchronous, create broadcast intent and pass to sendBroadcast(Intent) method
   - Local broadcasts, receive in same app as the sneder, more efficent and security, create broadcast intent and pass to LocalBroadcastManager.sendBroadcast
   - Ordered broadcasts, delivered to one receiver at a time, can progagate result to next receiver or cancel this broadcast to other receiver, pass intent to sendOrderedBroadcast(Intent, String)
* tools
  #+BEGIN_SRC bash
  telnet <host> <port>, connect to emulator, available command:
  - power
  - sms
  - network
  #+END_SRC
** DDM(Dalvik Device monitor)
   DDM contain kinds of debug tool
   - logcat, show log info
   - hirechay view, include ui component
   - method call, method call time and stack
 
** AVD(Android Virtual Device)
   create and manage virtual device(emulator)
** Profile GPU Rendering Tool
   To run the Profile GPU Rendering tool and complete this practical exercise, you need a physical or virtual device running at least Android 4.1 (API level 16) with Developer Options turned on.

   putting pixels on screen involves hardwares:
   - cpu computes display lists
   - gpu renders image to display
   - memory store your app data
   - battery provides power for all hardware
   
   when profiling an app, need siable instant run, otherwise impact performance and has a complicate stack trace

   on device developer optinon, choose profile GPU rendering to on screen as bars

   each bar presents one frame rendered.

   if bar goes above green line, means frame took more than 16 ms to render
** Memory Profile Tool
   Android Profiler is set of tools provide real-time information about app
   
   Memory Profiler is used tranck performance problem and creashes about memory

   Fatal signal 6 (SIGABRT), code -6 on logcat is means OOM
* View
  - Button, clickable element
  - RadioButton
  - CheckBox
  - Spinner
  - TextView, for displaying text
  - EditText, enable user enter and edit text
  - ScrollView/RevyclerView, display scrollable items
  - ImageView, display image
  - toggleButton
  - checkbox
  - ratingbar
  - autocompleteTextView
  - ConstriantLayout
  - LinearLayout
  - ScrollView

  View is basic ui element, any view add android:onClick attributes can clickable

  android load image into memory even only show a small thumbnail, use Glide efficient load large images

  android support res file for different resolution/orientation/locale, it will auto choose approciate res file
** Views
*** ScrollView 
    scrollview contain only one child view, but view can be ViewGroup

    keep all child view in memory

    make it can scroll

*** TextView 
    in strings.xml, \n means new line, ' and " use \ to escape, <b> bold, <i> italic
   
    android:autoLin="web", let http in text content linkable

*** Snackbar
*** FloatingActionButton
*** ImageView
*** EditText
    let user input data

    android:inputType, indicates accept which type and match input keyboard, inputType can combine use |

    android:imeOptions, change default done key, then setOnEditorActionListener implmement logic
**** inputType
     - textAutoCorrect: Suggest spelling corrections.
     - textCapSentences: Start each new sentence with a capital letter.
     - textPersonName: Show a single line of text with suggestions as the user types, and the Done key for the user to tap when they're finished.
     - textMultiLine: Enable multiple lines of text entry and a Return key to add a new line.
     - textPassword: Hide a password when entering it.
     - textEmailAddress: Show an email keyboard rather than a standard keyboard.
     - phone: Show a phone keypad rather than a standard keyboard.
*** Radio buttons
    user see all options side by side, only can choose one

    Radio button place in Radio Group, Radio group set orientation property, ratio order is delcare order

    Radio button share same onClick method
*** Spinner
    show user a dropdown list, only can choose one

    use string-array in strings.xml store options

    implmement AdapterView.OnItemSelectedListener to implmement logic
*** AppBarLayout ToolBar
    used to set action bar

    The template modifies the AndroidManifest.xml file so that the .MainActivity Activity is set to use the NoActionBar theme. This theme is defined in the styles.xml file.

    activity call setSupportActionBar() and pass toolbar to it

    app/res/menu include menu options:
    - id
    - orderInCategory, a value define display order, lowest value show first
    - title
    - showAsAction:
      * always, always appearea in the app bar(if there isn't enought room it mayb overlap with other menus icons)
      * ifRoom, appears in the app bar if there is room
      * never, never appears in the app bar, its text appears in the overflow menu
      
    override onCreateOptionMenu to set menu content

    override onOptionsItemSelected(MenumItem) implmement logic
*** ContextMenu
    same like action menu, but register by registerForContextMenu(View), then override onCreateContextMenu in activity to set menu content, override onCOntextItemSelected to implmement logic
*** Dialog
**** AlertDialog
     show a dialog let user choose positive or negative

     use AlertDialog.Builder to build
**** Picker
*** ViewPager TabLayout
    viewpager auto handle tab page switch, left/right swipe
    
    FragmentPagerAdapter: Designed for navigating between sibling screens (pages) representing a fixed, small number of screens.

    FragmentStatePagerAdapter: Designed for paging across a collection of screens (pages) for which the number of screens is undetermined. It destroys each Fragment as the user navigates to other screens, minimizing memory usage. The app for this task uses FragmentStatePagerAdapter.
    
    FragmentManager used to manage switch content
*** ScrollView RecyclerView
    ScrollView is easy to use, but not recommened for long, scrollable lists

    RececlerView is subcalss of ViewGroup and is more resource-efficient way to display scrollable list

    LayoutManager mange content, Adapater map data to display view use ViewHolder

    change LayoutManager can change view display way, verticle/horizontal/grid

    ViewHolder implement OnClickListener and set view clickHandler to this holder let every item clickable

    Adapater.notifyDataSetChanged will reload data to render

    ItemTouchHelper used to implememnt swipe/drag function in RecyclerView
*** CardView
    for material degisn guideline recommened used in image and text mixed
** View attributes:
   - id
   - text
   - color
   - backgrounp
   - android:gracity, specifies alignment of the content of a view within the view self

** Layout:
*** ConstriantLayout
    element is contraint each other
    
    layout_width/layout_height:
    - wrap_content, view size is same as content
    - wrap_constraint, view is extent to contraint size
    - fixed_size, padding is fixed size
    
    baseline constraint, used to align text/button text content

    expand horizontal/vertical, auto adjust layout_width/layout_height

*** LinearLayout
    required attributes: layout_width layout_height orientation

    android:layout_weight, indicates of extra space in LinearLayout, if only one view has this attributes, all extract space used by this view, if multiple view has, use percent to split

    layout_width/layout_height;
    - match_parent, expand the view to fill it parent by width/height
    - wrap content
    - fixed

    orientation:
    - horizontal, left to right
    - vertical, top to botoom

*** ReleativeLayout
    android:layout_below, let this view below some view

** Listener
   - onClick
   - onLongClick
   - onFocus
   - onKeyPress
** element size
   - dp, density-independent pixels
   - sp, scale-independent pixels

   ViewGroup is a invisible view, include other views, it is a container:
   - RadioGroup
   - TimePicker
   - DatePicker
   - WebView
   - MapView

   AdapterView:
   - ListView
   - Spinner
   - Gallery


   Menu:
   - Option Menu
   - Context Menu
   - Sub Menu

   Toast used to show message on screen, Toast.makeText(contex,msg,durtion) Toast.show()

** ShapeDrawable
   ShapeDrawable is primitive geometric shape define color,shape,padding and more
** Style
   style is bunch of shared property

   style auto extend parent property, if child has same property then override parents'

   child property can include addtional attributes

   create in res/values/styles.xml, use item name="<property name>" then value be property value, then use style=@style to reference

   use AppCompatDelegate to change app theme mode

   change theme need activity recreate to take effect
* Proxy/NoProxy
  test download speed: https://dl.google.com/android/repository/sys-img/google_apis/x86-28_r07.zip

  no proxy method:
  - test dl.google.com by ping.chinaz.com get ip then config host
  - edit build.gradle in project root, add 
    #+BEGIN_SRC gradle
   maven {url 'http://maven.aliyun.com/nexus/content/groups/public/'}
    #+END_SRC
    in buildscript.repositories and allprojects.repositories

  proxy method:
  - edit ~/.gradle/gradle.properties add
    #+BEGIN_SRC bash
    org.gradle.jvmargs=-DsocksProxyHost=127.0.0.1 -DsocksProxyPort=1080
    #+END_SRC
* Gradle
  gradle has tow config file:
** /build.gradle
   this is project level config, include repositories, project depedency, tasks
** /app/build/build.gradle
   this is module level config, include module depepdencies, sdk version require
   
   android.defaultConfig.minSdkVersion, set min sdk require

* Test
  app/src/test is unit test directory

  app/src/androidTest is instrumented test directory

** UI Test
   Espresso is include in android support repository for android ui test

   for test on physical device, close animations from Developer Options -> Drawings, close:
   - Window animation scale
   - Transition animation scale
   - Animator duration scale
   
   - use Viematcher find a  View, e.g. onView(withId(R.id.xx))
   - use ViewAction to perform a action, e.g. click
   - use ViewAssertion to check if the result of the action matchers an assertion, e.g. check
   
   for test dynamic added element, use onData to find element

   Android studio support record expresso test
* Android SDK
  Android SDK includes Adndroid Support Library, which not include in Android Framework:
  - Backward-compatible version of framework components
  - additional layout and user interface elements
  - support difference divice form factors
  - components support material design
  - other features, include palette support, annotations, preferences
* Thread
** AsyncTask
   AsyncTask is an abstract class, must subclass in order to use it

   - onPreExecute(): This method runs on the UI thread, and is used for setting up your task (like showing a progress bar).
   - doInBackground(): This is where you implement the code to execute the work that is to be performed on the separate thread.
   - onProgressUpdate(): This is invoked on the UI thread and used for updating progress in the UI (such as filling up a progress bar)
   - onPostExecute(): Again on the UI thread, this is used for updating the results to the UI once the AsyncTask has finished loading.
   
   AsyncTaskLoader solve activity recreate miss view issue, activity implmement LoaderManager.LoaderCallbacks
