* basic
  same machine multiple emulator can use port to dial each other

  Resouce has kinds of type:
  - String, define in res/values/*.xml, then use string/<name> reference, in java file use R.string.<name> reference
  - Layout file, define in res/layout/*.xml, in java file use R.layout.<name> reference, res/layout-land is for land mode
  
  on application must has least one Activity

  AndroidManifest.xml is for create apk(Android package)

  AndroidManifest.xml declartion permission:
  - <uses-permission>, require when install app
  - <permission>, protect self permission
  
  Android mutliple thread is based on java, only UI thread(Main thread) can update ui, use View.post or Activity.runOnUIThread to commit change to UI thread

  Logcat is standard log util, use Log.<level>(<tag>, <message>) to log

  Notifycation show message on top bar, new NOtification.Builder.setXXX().build -> getSystemService(NOTIFYCATION_SERVICE).notify

  getResources().getIdentifier(<name>, <type>, <package name>) get resource from app/res/values

  use compatiblity class in support library to support old version

  Back button(in bottom function bar) and Up botton(<-) is different thing:
  - back button, provides navigate to screen that most recently viewd
  - up botton, navigation from child to parent
  
  LayoutInflater convert a xml definition to View class
* 4 fundamental components:
  - Activity, for UI
  - Service, run on background
  - BroadcastReceiver, publish/subscriber pattern
  - ContentProvider, store share data across application
** Activity
*** Lifecycle
    [[./activity_lifecycle.png]] 
   

    onRetianNonConfigurationInstance(), used to calculate time consuming value, called on onStop/onDestory, getLastNonConfigurationInstance() get privouse calculate value, called on OnCreate

    screen rotate is a confugration change, active will re-create

    onCreate(Bundle)/onRestoreInstanceState(Bundle), this parameter is from override method onSaveInstanceState(), this method call between onPause and onStop, means later this active maybe destroyed/recreate, this data is only save in current app session

    Intent, some of View value auto keeped when active re-create
*** Fragment
    one activity can has multiple fragement, display different content

    fragment lifecycle is similar as activity, but in fine-grained

    use getActivity get fragement attached activity

    attach fragment to activity way:
    - declare in layout file
    - dynamic add to activity:
      * get from FragmentManager
      * create FragmentTranscation
      * attach to Activity
      * commit FragmentTranscation
    - use dialogFragment instance show method
    
    use Adapater is common pattern for presenting different screens of content with an Activity

    onCreateView method return inflater.inflate(layout id) to render fragement layout file
*** parent-child
    activity can declare parent in AndroidManifest.xml file, use android:parentActivityName declare, for compatible older version(api less 16), need add meta-data android.support.PARENT_ACTIVITY

    child activity auto has a up button (<-) in app bar, click will return to parent activity

*** Intent
    startActive/startActiveForResult to use intent start activity

    startActive/startActiveForResult , used to create another active in a active, need pass Intent arg, has two way match activity:
    - explicity set by Intent
    - match by intent-filter in AndroidManifest.xml

    intent used in setResult, and then can get from onActivityResult

    Intent is pass in activity:
    - Intent.xx, set action
    - Data
    - Category
    - Type(MIME)
    - Component, set jump location
    - Extra
**** Intent data pass:
   - data, a url argument
   - extras, key/value pairs in a Bundle
**** Explicit Intent
     take two parameter, first is from activity class, second is to activity class

     return from activity to call it acvitiy, no paramater

**** Implicit Intent
     Activity decalre it can received Intent in AndroidManifest.xml by Intent Filter

     take two paramater, an action and data

     use intent.resolveActivity(getPackageManager()) to find handle acvitiy

     ShareCompat.IntentBuilder is a easy way create share intent

     android.intent.action.MAIN intent is for entry activity

     inner actions:
     - Intent.ACTION_VIEW
     - Intent.ACTION_EDIT
     - Intent.ACTION_DIAL
** Service
   - NOTIFYCATION_SERVICE
   - ALARM_SERVICE
   - AUDIO_SERVICE:
     * SoundPool
     * MediaPlayer
     * MediaRecord
     * SensorManager
     * SensorEvent
** BoardcastReceiver
   constructor instruction:
   1. register service
   2. generate and send board intent
   3. onReceive handle event and delegate
   4. receiver onReceive
   
   registry way:
   - AndroidManifest.xml <receiver> tag add <intent-filter>
   - LocalBoardcastReceiver/Context registerReceiver
* tools
  #+BEGIN_SRC bash
  telnet <host> <port>, connect to emulator, available command:
  - power
  - sms
  - network
  #+END_SRC
** DDM(Dalvik Device monitor)
   DDM contain kinds of debug tool
   - logcat, show log info
   - hirechay view, include ui component
   - method call, method call time and stack
 
** AVD(Android Virtual Device)
   create and manage virtual device(emulator)
* View
  - Button, clickable element
  - RadioButton
  - CheckBox
  - Spinner
  - TextView, for displaying text
  - EditText, enable user enter and edit text
  - ScrollView/RevyclerView, display scrollable items
  - ImageView, display image
  - toggleButton
  - checkbox
  - ratingbar
  - autocompleteTextView
  - ConstriantLayout
  - LinearLayout
  - ScrollView

 View is basic ui element, any view add android:onClick attributes can clickable

 android load image into memory even only show a small thumbnail, use Glide efficient load large images
** Views
*** ScrollView 
   scrollview contain only one child view, but view can be ViewGroup

   keep all child view in memory

   make it can scroll

*** TextView 
   in strings.xml, \n means new line, ' and " use \ to escape, <b> bold, <i> italic
   
   android:autoLin="web", let http in text content linkable

*** Snackbar
*** FloatingActionButton
*** ImageView
*** EditText
    let user input data

    android:inputType, indicates accept which type and match input keyboard, inputType can combine use |

    android:imeOptions, change default done key, then setOnEditorActionListener implmement logic
**** inputType
     - textAutoCorrect: Suggest spelling corrections.
     - textCapSentences: Start each new sentence with a capital letter.
     - textPersonName: Show a single line of text with suggestions as the user types, and the Done key for the user to tap when they're finished.
     - textMultiLine: Enable multiple lines of text entry and a Return key to add a new line.
     - textPassword: Hide a password when entering it.
     - textEmailAddress: Show an email keyboard rather than a standard keyboard.
     - phone: Show a phone keypad rather than a standard keyboard.
*** Radio buttons
    user see all options side by side, only can choose one

    Radio button place in Radio Group, Radio group set orientation property, ratio order is delcare order

    Radio button share same onClick method
*** Spinner
    show user a dropdown list, only can choose one

    use string-array in strings.xml store options

    implmement AdapterView.OnItemSelectedListener to implmement logic
*** AppBarLayout ToolBar
    used to set action bar

    The template modifies the AndroidManifest.xml file so that the .MainActivity Activity is set to use the NoActionBar theme. This theme is defined in the styles.xml file.

    activity call setSupportActionBar() and pass toolbar to it

    app/res/menu include menu options:
    - id
    - orderInCategory, a value define display order, lowest value show first
    - title
    - showAsAction:
      * always, always appearea in the app bar(if there isn't enought room it mayb overlap with other menus icons)
      * ifRoom, appears in the app bar if there is room
      * never, never appears in the app bar, its text appears in the overflow menu
      
    override onCreateOptionMenu to set menu content

    override onOptionsItemSelected(MenumItem) implmement logic
*** ContextMenu
    same like action menu, but register by registerForContextMenu(View), then override onCreateContextMenu in activity to set menu content, override onCOntextItemSelected to implmement logic
*** Dialog
**** AlertDialog
     show a dialog let user choose positive or negative

     use AlertDialog.Builder to build
**** Picker
*** ViewPager TabLayout
    viewpager auto handle tab page switch, left/right swipe
    
    FragmentPagerAdapter: Designed for navigating between sibling screens (pages) representing a fixed, small number of screens.

    FragmentStatePagerAdapter: Designed for paging across a collection of screens (pages) for which the number of screens is undetermined. It destroys each Fragment as the user navigates to other screens, minimizing memory usage. The app for this task uses FragmentStatePagerAdapter.
    
    FragmentManager used to manage switch content
*** ScrollView RecyclerView
    ScrollView is easy to use, but not recommened for long, scrollable lists

    RececlerView is subcalss of ViewGroup and is more resource-efficient way to display scrollable list

    LayoutManager mange content, Adapater map data to display view use ViewHolder

    ViewHolder implement OnClickListener and set view clickHandler to this holder let every item clickable

    Adapater.notifyDataSetChanged will reload data to render

    ItemTouchHelper used to implememnt swipe/drag function in RecyclerView
*** CardView
    for material degisn guideline recommened used in image and text mixed
** View attributes:
   - id
   - text
   - color
   - backgrounp
   - android:gracity, specifies alignment of the content of a view within the view self

** Layout:
*** ConstriantLayout
    element is contraint each other
    
    layout_width/layout_height:
    - wrap_content, view size is same as content
    - wrap_constraint, view is extent to contraint size
    - fixed_size, padding is fixed size
    
    baseline constraint, used to align text/button text content

    expand horizontal/vertical, auto adjust layout_width/layout_height

*** LinearLayout
    required attributes: layout_width layout_height orientation

    android:layout_weight, indicates of extra space in LinearLayout, if only one view has this attributes, all extract space used by this view, if multiple view has, use percent to split

    layout_width/layout_height;
    - match_parent, expand the view to fill it parent by width/height
    - wrap content
    - fixed

    orientation:
    - horizontal, left to right
    - vertical, top to botoom

*** ReleativeLayout
    android:layout_below, let this view below some view

** Listener
   - onClick
   - onLongClick
   - onFocus
   - onKeyPress
** element size
   - dp, density-independent pixels
   - sp, scale-independent pixels

   ViewGroup is a invisible view, include other views, it is a container:
   - RadioGroup
   - TimePicker
   - DatePicker
   - WebView
   - MapView

   AdapterView:
   - ListView
   - Spinner
   - Gallery


   Menu:
   - Option Menu
   - Context Menu
   - Sub Menu

   Toast used to show message on screen, Toast.makeText(contex,msg,durtion) Toast.show()

** ShapeDrawable
   ShapeDrawable is primitive geometric shape define color,shape,padding and more
** Style
   style is bunch of shared property

   style auto extend parent property, if child has same property then override parents'

   child property can include addtional attributes

   create in res/values/styles.xml, use item name="<property name>" then value be property value, then use style=@style to reference

   use AppCompatDelegate to change app theme mode

   change theme need activity recreate to take effect
* Proxy/NoProxy
  test download speed: https://dl.google.com/android/repository/sys-img/google_apis/x86-28_r07.zip

  no proxy method:
  - test dl.google.com by ping.chinaz.com get ip then config host
  - edit build.gradle in project root, add 
    #+BEGIN_SRC gradle
   maven {url 'http://maven.aliyun.com/nexus/content/groups/public/'}
    #+END_SRC
    in buildscript.repositories and allprojects.repositories

  proxy method:
  - edit ~/.gradle/gradle.properties add
    #+BEGIN_SRC bash
    org.gradle.jvmargs=-DsocksProxyHost=127.0.0.1 -DsocksProxyPort=1080
    #+END_SRC
* Gradle
  gradle has tow config file:
** /build.gradle
   this is project level config, include repositories, project depedency, tasks
** /app/build/build.gradle
   this is module level config, include module depepdencies, sdk version require
   
   android.defaultConfig.minSdkVersion, set min sdk require

* Test
app/src/test is unit test directory

app/src/androidTest is instrumented test directory
* Android SDK
Android SDK includes Adndroid Support Library, which not include in Android Framework:
- Backward-compatible version of framework components
- additional layout and user interface elements
- support difference divice form factors
- components support material design
- other features, include palette support, annotations, preferences
