* Self sign ssl key

  #+BEGIN_SRC bash

openssl req \ 

  -newkey rsa:4096 -nodes -sha256 -keyout certs/domain.key \ 

  -x509 -days 365 -out certs/domain.crt

  #+END_SRC

  on CN(common name) input your address(not include port part)

  .key is private key

  .crt is certifacate and public key

  if CN set to ip, modify /etc/ssl/openssl.cnf add subjectAltName=IP:<ip> under [v3_ca] section

* ssh
  ssh host <command> execute command on target host without open full terminal
  cat <pub> | ssh <host> "cat >> .ssh/authorized_keys", add pub to remote machine
  ssh-copy-id, automatically copies the public key to the apporiate location on the remote host
** scp
   copy file between network computer by openssh
** ui over ssh
   change sshd_config X11Forwaring yes
   chnage ssh_config ForwardX11 yes
   ssh -X <host>, then execute gui like gnome-mines
** Config
   /etc/ssh/sshd_config, controll openssh as server behavior
   /etc/ssh/ssh_config, controll openssh as client behavior
   ~/.ssh/authorized_keys, ssh will use this file public key to check ssh private key login
** Cli
   + -i, set private key
** generate ssh key
   #+BEGIN_SRC bash
  ssh-keygen -t rsa -b 4096 -C 
  eval "$(ssh-agent -s)" 
  ssh-add ~/.ssh/id_rsa 
  sudo apt-get install xclip 
  xclip -sel clip < ~/.ssh/id_rsa.pub
   #+END_SRC
** remove ssh key when host change
   #+BEGIN_SRC bash
  ssh-keygen -R <host>
   #+END_SRC
** ssh port forward
   in need login machine:
   #+BEGIN_SRC bash
   autossh -R <remote port>:localhost:<local ssh port> <name>@<remote ip>
   #+END_SRC
   in remote machine:
   #+BEGIN_SRC bash
   ssh -L <your port>:localhost:<remote port> <name>@<remote ip>
   ssh -p <your port> <name>@localhost
   #+END_SRC
** allow port forward work
   GatewayPorts on
* Bash
  | wildcard        | matches                                               |
  | *               | Any character                                         |
  | ?               | Any single character                                  |
  | [characters]    | any character that is a memeber of the set characters |
  | [!characters]   | any character that is not a memeber of the characters |
  | [ [ :class: ] ] | any character that is a member of the specified class |
  Ctrl-shift-c copy
  Ctrl-shift-v paste
  || is or, short circuit
  && is and, short circuit
  > redirect stdout to overwrite file
  >> redirect stdout append to file
  2> redirect stderr to overwrite file
  > [file] 2>&1 (old shell) &> [file] (new shell) redirect stdout and stderr to same file
  < redirect stdin from file
  | is pipe, redirect previous command stdout to next command stdin
  tilde(~) is user home placeholder
  $(()) is arithmetic expansion
  {} brace expansion, support choose {A,B}, range {A..Z}
  $() and `` is command subsitution
  all special chatacaters used by shell lose their special meanning and are treated as ordinary characters in doule quotes, exceptions are $ \ `
  single quotes supress all expansions
** ls
   list file/dir
   + -h --human-readable, display file size in human-readable format
   + -R recursive show subdirs and subfiles
   + -z display file security context
   + -a --all, List all fiels, even those with names that begin with a period
   + -d --directory, see detail about the directory rathen that its contents
   + -F --classify, append an indicator to end of each listed name
   + -l , display results in long format
   + -r --reverse, display result in reverse order
   + -S, sort result by file sizes
   + -t, sort by modification time
   + -i, show inode info
** pwd
   present work directory
** cd
   change directory
   cd without argument will go to login user home dir
** cat
   accessing content of text file
   + -A show invisible character
   + -n show line number
   + -s supresses output multiple blank lines
** zcat
   accessing content of zip file
** less
   display file contents
** touch 
   create empty file
   touch exist file will update its time stamp wihtout making any change
** stat
   show file inode information
** mkdir
   create directory
   + -p recursive create
** rmdir
   remove directory
** rm
   remove file/directory
   + -i --interactive, before deleting an existing file, prompt the user for confirmation
   + -r --recursive, revursive remove
   + -f --force, ignore nonexistent files and do not prompt
   + -v --verbose
** cp
   copy file
   + -a --archive, copy the fires and directorys and alll of their attributes, include ownerships and permissions
   + -i --interractive, before overritingan exising file, prompt the user for confirmation
   + -r --recursive, recursively copy directories and their contents
   + -u --update, copy only files that either don't exist or are newer that the existing corresponding files in the destination directory
   + -v --verbose
** mv
   permanently move an object from one place to another
   + -i --interractive, before overritingan exising file, prompt the user for confirmation
   + -r --recursive, recursively copy directories and their contents
   + -u --update, copy only files that either don't exist or are newer that the existing corresponding files in the destination directory
** su
   run a shell with substitute User and Group ids
   + -l, the resulting shell session is a login shell, means user's environment is loaded and the working directory is changed to user's home direcotry
   + -, same as -l
   + -c, execute command
** sudo
   execute command by root user
   sudo su, drop in root shell
** man
   show program document manual
** journalctl
   access all system logs 
   -n <number>, show last n log
   -p emerg, filter emergency log
   -f ,folow output, watch events in real time
   --since --until, filter by date
   -e, end
   -u <service>, set message generated by <service>
   -b -1, only show message from the last system boot
** grep 
   filter content by keyword 
   + -r recursive 
   + -n line number 
   + -l only show file name
   + -e posix extension
   + -P Perl regex 
   + -b binary include 
   + -l ignore case 
   + -v reverse select
   + -A after lines number
   + -B before line number
   + -i ignore case

** arch
   get hardware is 64 or 32
** wget
   download file from http
** shasum
   shasum calculate file sum
** systemctl
   systemd controll
   #+BEGIN_SRC bash
  systemctl status <name>
  systemctl start <name>
  systemctl stop <name>
  systemctl enable <name> # enable auto start
  systemctl disable <name> # disable auto start
  systemctl list-unit-files --type=service --state=enabled
   #+END_SRC
** ip
   ip addr, get ip address for all network interface
   ip route, show router(gateway)
   ip addr add <ip> dev <device>, configure static ip address, need reboot to take effect
   ip link set dev <device> up/down, up/down network interface
** ps
   show system process
   + -e, show process from all parent shells
   <user> <pid> <parent pid> 
** pstree
   show process tree
   + -p, show pid
** file
   show file detail
** df
   show disk usage
   + -h, human readable
   + -i, show inode info(used/free)
** gzip
   without lost compress or expand file
** gunzip
   unzip gzip compress file
** bzip2
   without lost compress file
** bunzip2
** zip
  zip <target> <source> # -o output file, -r recursive, -q quite, -e encrypt, -l \n -> \r\n
** tar 
   tar <options> <tar name> <source file>
   + -c create 
   + -v verbose 
   + -x extract 
   + -f, archive filename 
   + -t show 
   + -p keep permission 
   + -z gz + -J xz 
   + -j bz2 
   + +r, append insted of overwrite  
   + --one-file-system, exclude pseudo partitions 
   + --exclude, exclude partition from source file
** split
   split <origin> <target>, split file to multiple part, then use cat name* > newfile to merge content
   + -b <size>, set split size
** find
   find every kind of file/directory
   + -exec, execute command on find file, {} is find file name
   + -type, set find file or directory
   
*** file type
    | file type | description                   |
    |-----------+-------------------------------|
    | b         | Block special device file     |
    | c         | Character special device file |
    | d         | Directory                     |
    | f         | Regular file                  |
    | l         | Symbolic link                 |
*** test
*** action
    | action             | description                                                                                                                   |
    |--------------------+-------------------------------------------------------------------------------------------------------------------------------|
    | -delete            | Delete the currently matching file.                                                                                           |
    | -ls                | Perform the equivalent of ls -dils on the matching file.   Output is sent to standard output.                                 |
    | -print             | Output the full pathname of the matching file to standard output. This is the default action if no other action is specified. |
    | -quit              | Quit once a match has been made.                                                                                              |
    | -exec command {} ; | User define action                                                                                                            |
    | -exec command {} + | all find result will once pass to command with space separate                                                                 |

** locate
   query filesystem from /var/lib/mlocate/mlocate.db, index is updated every time the system boots
   updatedb, manually update index
** chmod
   change file permission
   octal representation 4 r 2 w 1 x
   symbolic representation. 
   | symbol | meaning                                               |
   | u      | Short for user but means the file or directory owner. |
   | g      | Group owner.                                          |
   | o      | Short for others but means world.                     |
   | a      | Short for all; the combination of u, g, and o.        |

   | Notation | Meaning           |
   | +        | add permision     |
   | -        | remove permission |
   | =        | set permision     |
   o-r remove others read permission, g+w add group write permission
** chown
   change file user/group
** usermod
   #+BEGIN_SRC bash
   usermod -aG <group> <user> #add user to group
   #+END_SRC
** rsync
   incremental file sync
   + -a, recursive and preserve special files, modification times, and owernship and permissions
   + -v, verbose
** useradd/adduser
   add user, ubuntu prefer adduser
** groupadd
   add group
** crontab
   + -l, show crontab for current user
   + -e, edit crontab
** mount
   mount info, also used to mount disk
   mount <path> <dev>
** umount
   unmount a filesystem
** fdisk  
   partition table manipulator
** fsck
   check and repair a filesystem
** mkfs
   format disk to type
** dd
   write block-oriented data directtly to a device
   + -of output file(device),
   + -if input file(device),
   + -bs base size(byte)
   + -count number
   + -conv convert function
** passwd
   change user password
   passwd <username>
** awk
   process/filter/show content
   + -F spliter
   + -v set varaible
   + -f set file
** netstat
   show listen port status
   + -n show numeric ports and address
   + -l includes only listening sockets
   + -p  show process id
   + -i, show network interface
   + -r, show route table
   + -a, list all ports (both TCP and UDP)
   + -at, list all tcp ports
   + -au, list all udp ports
   + -lt, all listen tcp ports
   + -lu, all listen udp ports
   + -lx, all listen UNIX ports
   + -s, show statistics by protocol
   + -ac, display promiscuous mode, refresh secreen every define seconds
   + -i, show network interface transactions
** nc(netcat)
   connect a remote address and output content
   + -z, restrict output to the result of a scan for listeninging daemons(rather than trying make a connection)
   + -v, verbosity output
** nmap
   nmap -sT -p<from>-<to> <host> scan host open port
   namp -sP -PE -n 192.168.1.0/24 scan network all ips
** ss
   replace netstat
   example ss -o state established '( dport = :ssh or sport = :ssh )'
** iptables
   + -L, list all current rulese
   + -A FORWARD/REJECTED/PREROUTING,
   + -t nat,
   + -i, source
   + -d, domain
   + -dport, port
   + --to-destionation
** sed
  find -> replace,
  + -n only output affect line,
  + -i modify file
  + -m-n, from line m to n,
** ln
   create either hard or symbolic links 
   hard link duplicate file share same inode with origin file
   A hard link cannot reference a file outside its own filesystem
   A hard link cannot reference a directory
   + -s soft
** top
   provides a rich, self-updating display of process information.
   | metric | meaning                                        |
   | us     | Time running high-priority(un-niced) processes |
   | sy     | Time running kernel processes                  |
   | nice   | Time running low-priority(nice) processes      |
   | id     | Time spent idling                              |
   | wa     | Time waiting for I/O Events to complete        |
   | hi     | Time spent managing hardware interrupts        |
   | si     | Time spent managing software interrupts        |
   | st     | Time sotlen from this Vm by its hypervisor                                                |
** nice
   start command with nice value
** renice
   set a running process nice value
** free
   show memory info
** vmstat
   output a snapshot of systm resource usage includeing memory, swap and disk io
** iftop
   dispaly a self-updating record of the greediest network activity traveling throught network interface
** tc
   network traffic control
   tc qdisc add dev <device> root netem delay 100ms, add 100ms delay for all network traffic for <device>
   tc -s qdisc ls dev <device>, show device controll status
   tc qdisc del dev <device> root, delete rule
** lsblk 
   show all connect disk, include not mounted
** lspci
   show Peripheral Component Interconnect (PCI) hardware
** lshw
   show hardware
   + -html, output html format
   + -class(-c), filter by hardware type network/memory/storage/multimedia/cpu
** lsusb
** traceroute
   trace end-to-end package trip
** dmesg
   show device connection debug info
** uname
   uname -a, show linux kernal info
** lsmod
   show loaded module information
** modprobe
   manually active kernel mod
   + -c show available mods
** lp
   use printer print file
** date
** cal
   show calander in command line
** type
   indicate how a command name is interpreted
** which 
   display which executable program will be executed
** man
   display a command manual page
** apropos
   display a list of appropriate commands.
** info
   display a command's info entry
** whatis
   display a very brief description of a command
** alias
   create an alias for a command
** sort
   sort lines of text
  + -n number order
  + -r reverse
  + -t split character
  + -k sort by multiple column number, range, type
** uniq
  report or omit repeated lines
** wc 
   count number
   + -l line
   + -w word
   + -c character
   + -m bytes
   + -L longest line
** more/less/head/tail 
   show file content
** tee
   read from standard input and write to standard output and files
** id
   display user identity
** umask
   set default permission when file create
** jobs
   list active jobs
** bg
   place a job in the background
** fg
   place a job in the foreground
** kill
   send a signal to a process
** killall
   kill processes by name
   + -l, show available signal type
** shutdown
** printenv
   show environment varaibles
** set
   show bash and environment varaibles
** cut 
   | Option        | Description                                                                         |
   |---------------+-------------------------------------------------------------------------------------|
   | -c char_list  | extract the portion of the line defined by char_list                                |
   | -f field_list | extract one or more fields from the line as defined by field_list                   |
   | -d delim_char | when -f is specified, use delim_char as the field delimiting character              |
   | --complement  | extract the entire line of text, except for those portons specified by -c and/or -f |
** paste 
   merge lines of files
** join
   join lines of two fiels on a common field
** comm
   compare two sorted files line by line
   -<n>, output which columns, 1 is file1 only, 2 is file2 only, 3 is common
** diff
   compare files line by line
** tr
   transliterate or delete character
** sed
   stream editor for filtering and transforming text
   address notation
   | address     | description                                                                                |
   |-------------+--------------------------------------------------------------------------------------------|
   | n           | A line number where n is a positive integer                                                |
   | $           | the last line                                                                              |
   | /regexp/    | lines matcing a posix basic regular expression                                             |
   | addr1,addr2 | a range oflines from addr1 to addr2                                                        |
   | first~step  | match line represented by the number first and then each subsequent line at step intervals |
   | addr1,+n    | match addr1 and the follwing n lines                                                       |
   | addr!       | match all lines except addr                                                                |
   basic editing commands
   | command               | description                                                                                            |
   |-----------------------+--------------------------------------------------------------------------------------------------------|
   | =                     | output current line number                                                                             |
   | a                     | append text after the current line                                                                     |
   | d                     | delete the current line                                                                                |
   | i                     | insert text in front of the current line                                                               |
   | p                     | print the current line                                                                                 |
   | q                     | exit sed without processing any more lines. if the -n option is not specified, output the current line |
   | Q                     | exit sed without processing any more lines                                                             |
   | s/regexp/replacement/ | substitue the contents of replacement wherever regexp is fund                                          |
   | y/set1/set2           | perfrm transliteration by converting characters from set1 to the corresponding charcters in set2       |

   
 #+BEGIN_SRC bash
  rename # batch rename file by reg
  tac/nl # show file content
  echo $<var> # show environment varaible 
  set # show all environment
  env # show current user environment
  export # show environment from export, set > env > export
  unset # delete environment varaible
  vimdiff # diff file
  whereis # query data from db, -b binary file, -m source file, -m help file
  file <filename> # get file type encode info
  curl # -X method, -c get cookie, -b pass cookie, -d post body
  unzip # -l show content not extract
  du # file size, -h human readable, -d <num> dir nest level, -a all file, -s summarize
  corntab # -f start -e edit -l show -r delete
  $? # previous command exit code
  col # tab <-> space, -x tab -> space, -h space -> tab
  join # connect two file, -t splitor, -l ignore case, -1 file 1 filed, -2 filed 2 file
  xargs # split long args
  blkid # show disk uuid
  find . -type f -name "*.java" -exec sed -i -e 's//' {} \; # find in file and replace

   #+END_SRC

** stress-ng
   memory test util
   stress-ng --vm-bytes $(awk '/MemAvailable/{printf "%d\n", $2 * 0.9;}' < /proc/meminfo)k --vm-keep -m 1
* Login vs Non-Login shell start up file for login shell sessions: | file            | contents                                                                                                                               | | /etc/profile    | gobal confiugration script that applies to all users                                                                                   | | ~/.bash_profile | user's personal startup file. can be used to extend or override settings in the global configuration script                            | | ~/.bash_loigin  | if ~/.bash_profile is not found, bash attempts to read this script.                                                                    | | ~/.profile      | if neither ~/.bash_profile nor ~/.bash_login is found, bash attempts read this file. This is the default in Debian-based distributions | non-login shell sessions: | file             | contents                                                                                                        | | /etc/bash.bashrc | A global configuration script that applies to all users                                                         | | ~/.bashrc        | A user’s personal startup file. Can be used to extend or soverride settings in the global configuration script. | * User
  #+BEGIN_SRC bash
  whoami # show current log in user
  groups # show user group, full group store in /etc/groups
  adduser <user> # create a user
  deluser <user> # delete a user, --remove-home delete home directory
  usermod -G <group> <user> # add user to group
  su -l <user> # run as user
  #+END_SRC
* Package manager
** Apt
   Advanced Package Tool
   Debian / Ubtunut / Mint / Kail Linux
   #+BEGIN_SRC bash
  apt update # update package from online repositories
  apt search # search package
  apt show
  apt install -f # fix broken
  apt install -d # download only, not install
   #+END_SRC
** RPM
   Red Hat Enterprise Linux / CentOS / Fedora
** YUM / DNF
   Red Hat, DNF is new package manager
   #+BEGIN_SRC bash
  yum update # update package from online repositories
  yum search # search package
  yum info
  apt install 
   #+END_SRC
** YaST
   SUSE linux / OpenSUSE
   
* Dpkg
  #+BEGIN_SRC bash
  dpkg -i # install
  dpkg -R # install directory
  dpkg -r # remove
  dpkg -s # show installed
  dpkg -S # search installed
  #+END_SRC
* back up system
  Refer to this howto: http://ubuntuforums.org/showthread.php?t=35087
  In simple terms, the backup command is: sudo tar czf /backup.tar.gz --exclude=/backup.tar.gz--exclude=/dev --exclude=/mnt --    exclude=/proc --exclude=/sys --exclude=/tmp --exclude=/lost+found /. Add more --exclude= parameters if you need to.
  It will create an archive of all your files at /backup.tar.gz, which you can then copy over to another computer/drive and restore your files if the install goes pear-shaped. You can do it from a LiveCD, by mounting the "bad" system under /media or /mnt and running tar xf /path/to/drive/with/backup.tar.gz -C /mnt (substitute for the actual path to the "bad" system).
  This will not cover GRUB, however you can easily reinstall it by following this guide here. You only need to do steps Three and Four.
* RSA
  #+BEGIN_SRC bash
  openssl genrsa -des3 -out private.pem 2048
  openssl rsa -in private.pem -outform PEM -pubout -out public.pem
  openssl rsa -in private.pem -outform PEM -out private_unenvrypted.pem 
  #+END_SRC
* swap check
  #+BEGIN_SRC bash
#!/bin/bash
# Get current swap usage for all running processes
# Erik Ljungstrom 27/05/2011
SUM=0
OVERALL=0
for DIR in `find /proc/ -maxdepth 1 -type d | egrep "^/proc/[0-9]"` ; do
        PID=`echo $DIR | cut -d / -f 3`
        PROGNAME=`ps -p $PID -o comm --no-headers`
        for SWAP in `grep Swap $DIR/smaps 2>/dev/null| awk '{ print $2 }'`
        do
                let SUM=$SUM+$SWAP
        done
        echo "PID=$PID - Swap used: $SUM - ($PROGNAME )"
        let OVERALL=$OVERALL+$SUM
        SUM=0

done
echo "Overall swap used: $OVERALL"
  #+END_SRC
* ClamAV
  #+BEGIN_SRC bash
  freshclam # update lib
  clamscan -r /etc --max-dir-recursion=5 -l /root/etcclamav.log
  clamscan -r /bin --max-dir-recursion=5 -l /root/binclamav.log
  clamscan -r /usr --max-dir-recursion=5 -l /root/usrclamav.log
  clamscan -r --remove /usr/bin/bsd-port
  clamscan -r --remove /usr/bin/
  grep -i "Found" /root/xx.log
  #+END_SRC
* File System
  linux generate disk format is ext4
  usally, tehre'll be exactly one inode for each file or directory
  pseudo file, like /sys /proc is generate by system, not actually exist on disk
  ls output format [is directory][owner read][owner write][owner execute][group read][group write][group execute][other read][other read][other execute]
  /etc/passwd, store user/group home shell info
  /etc/shadow, store user password
  /etc/group, store all group info
  /etc/gshadows, cotnain encrypted versions of group password for use if you sometimes want to allow group resource access to non-group user
  general directory
  - /etc, program configuration files
  - /var, frequently chaning content, e.g. log file
  - /home, user account files
  - /sbin, System binary file
  - /bin, User binary file
  - /lib, share library
  - /usr, third-part binary
  - /sys/block, disk info
  /etc/fstab configure automatically mount 
  fstabe format:
  | field       | purpose                                                                                                      |
  | File system | Identifies a device either by its boot-time designation(/dev/sda1) or, preferably, by its more reliable UUID |
  | Mount point | Identifies the location on the file system where the devices is currently mounted                            |
  | Type        | the file system type                                                                                         |
  | Options     | MOunt options assigned to the device                                                                         |
  | Dump        | tells the (outdated) Dump program whether(1) or not(0) to back up the device                                 |
  | Pass        | tells the fsck program which file system to check first at boot time, the root partions should be first      |
* Virtualbox
** Cli
   #+BEGIN_SRC bash
   vboxmanage list vms
   vboxmanage clonevm --register <template> --name <to>
   vboxmanage export <name> -o xx.ova # export to Open Virtualization Format
   vboxmanage import xx.ova # import vm
   #+END_SRC
* LXC
  linux container
  container file and config store in /var/lib/lxc
  templates is under /usr/share/lxc/templates
** Install
   apt install lxc
   apt install lxc-templates
** Cli
   #+BEGIN_SRC bash
   lxc-create -n <name> -t <template>
   lxc-ls --fancy # list container
   lxc-start # start container, -d detached -n <name>
   lxc-attach -n <name> # attach to container
   #+END_SRC
* add utf bom header
  #+BEGIN_SRC bash
   sed -i '1s/^\(\xef\xbb\xbf\)\?/\xef\xbb\xbf/' foo-*
  #+END_SRC
* System
  /sbin/init is first process ubuntu start
* Backup file system
  best practices:
  - Reliable, Use only storage media that are reasonably likely to retain their integrity for the length of time you intend to use them.
  - Tested, Test restoring as many archive runs as possible in simulated production environments.
  - Rotaed, Maintain at least a few historical archives older than the current backup in case the latest one should somehow fail.
  - Distributed, Make sure that at least some of your archives are stored in a physically remote location. In case of fire or other disaster, you don’t want your data to disappear along with the office.
  - Secure, Never expose your data to insecure networks or storage sites at any time during the process.
  - Compliant, Honor all relevant regulatory and industry standards at all times
  - Up to date, What’s the point keeping archives that are weeks or months behind the current live version?
  - Scripted, Never rely on a human being to remember to perform an ongoing task. Automate it
  /etc/cron.daily contain everday running task
** Tool
*** tar
    use command tar
    archive then transfter to remote:
    #+BEING_SRC bash
    tar cvzf - --one-file-system / /usr /var --execute=/home | ssh <host> "cat > /home/backup.tar.gz"
    #+END_SRC
*** dd
    dd if=/dev/sda1 of=xx.img, backup disk to a img file
    dd if=/dev/zero of=/dev/sda1, wipe disk with 0
    dd if=/dev/urandom of=/dev/sda1, wipe disk with random
*** rsync
* Scheduling task
** cron
   /etc/anocrontab, execute task after system boot
   /etc/crontab, execute by cron expression
   /etc/cron.d, execute by cron expression
   /etc/cron.daily, execute everyday
   /etc/cron.hourly, execute hourly
   /etc/cron.monthly, execute monthly
   /etc/cron.weekly, execute weekly
   cron expression:
   <minute> <hour> <day of month> <month> <day of week>
   anoncron expression:
   <interval> <delay>
** systemd timer
   more advanced than cron
   create need follow step:
   1. create .service file under /etc/systemd/system
   2. create .timer file under /etc/systemd/system
   3. systemctl start <name>
   4. systemctl enable <name>
*** cli
    #+BEGIN_SRC bash
    systemctl list-timers --all #show all timers
    #+END_SRC
* GRUB
* System recover
  ubuntu grub has recervory mode
  use live cd Boot-Repair fix grub problem
  GParted fix partition problem
  TestDisk fix damaged partitions
  use isohybrid modify iso to add MBR(Master boot record), isohybrid contain in ubuntu syslinux-utils package
  ubuntu live cd include memory test tool
  ddrescue, data recovery tool, include in apt gddrescue package, usage, ddrescue -d <device> <backup> <logfile>
  photorec, file recervory
** recovery password
   1. mkdir /run/mountdir
   2. mount <root device> /run/mountdir
   3. chroot /ruun/mountdir
* Security system
  configure firewall rules
  firewalld(Centos Ubuntu) and UncomplicatedFirewall(ubuntu) is build on top of iptables
** firewalld
*** Cli
    #+BEGIN_SRC bash
    firewall-cmd --state # show running state
    firewall-cmd --permanent --add-port=80/tcp # permanent add port to allow port
    firewall-cmd --reload
    firewall-cmd --list-services
    firewall-cmd --add-service=
    firewall-cmd --add-rich-rule  # https://fedoraproject.org/wiki/Features/FirewalldRichLanguage
    #+END_SRC
** UFW
   UncomplicatedFirewall
*** Cli
    #+BEGIN_SRC bash
    ufw allow ssh # allow service
    ufw enable
    ufw disable
    ufw status # show running rule
    ufw delete <number> # delete rule from ufw status list
    ufw allow from <ip> to any port 22 # set rule for ip port
    ufw allow <from port>:<to port> # open range port
    #+END_SRC

** SELinux
*** Cli
    #+BEGIN_SRC bash
    sestatus # show current SELinux status
    selinux-activate # enable SELinux
    setenforce <number> # set policy type
    #+END_SRC
* OpenVPN
** Server
   1. install package: openvpn easy-rsa
   2. generate public key infrasturecture
      + cp -r /usr/share/easy-rsa/ /etc/openvpn/
      + edit /etc/openvpn/easy-rsa/vars
      + . ./vars
      + ./clean-all
      + ./build-ca
      + ./build-key-server server
      + cp /etc/openvpn/easy-rsa/keys/server* /etc/openvpn
      + cp /etc/openvpn/easy-rsa/keys/dh2048.pem /etc/openvpn
      + cp /etc/openvpn/easy-rsa/keys/ca.crt /etc/openvpn
      + ./pkitool client  # genearte client.crt and client.key
   3. configure server.conf
      + zcat /usr/share/doc/openvpn/examples/sample-config-files/server.conf.gz > /etc/openvpn/server.conf
      + edit server.conf
      + systemctl start openvpn
** Client
   1. install package: openvpn
   2. configure client.conf
      + cp /usr/share/doc/openvpn/examples/sample-config-files/client.conf /etc/openvpn/
   3. copy generate client key
   4. openvpn --tls-client --config /etc/openvpn/client.conf
* DMZ(Demilitarized zones)
** Iptables
   
** Shorewall
* System log
** syslogd
  linux logging has ever managed by syslogd daemon, collect log from /dev/log pseudo device, then send to correspond /var/log file
  all syslogd log will send to /var/log/syslog, and /etc/rsyslog.d/ config file decide part of them send to other /var/log file
  | filename | purpose                                                          |
  | auth.log | system authntication and security events                         |
  | boot.log | a record of boot-related events                                  |
  | dmesg    | kernal-ring buffer events related to device drivers              |
  | dpkg.log | software package-management events                               |
  | kern.log | Linux kernel events                                              |
  | syslog   | A collection of all logs                                         |
  | wtmp     | Tracks user sessions(accessed through the who and last commands) |

  | level  | description                   |
  | debug  | helpful for debugging         |
  | info   | Informational                 |
  | notice | Normal conditions             |
  | warn   | Conditions requiring warnings |
  | err    | Error conditions              |
  | crit   | Critical conditions           |
  | alert  | Immediate action required     |
  | emerg  | System unusable               |
  syslogd rotate control by /etc/logrotate.conf
** journald
  linux logging now is handled by journald(syslogd hasn't gone anywhere)
  journald is binary format, use journalctl to access log
  journald auto remove old msg when maximum disk space reached, control by /etc/systemd/journald.conf file SYstemMaxUse= and RuntimeMaxUse= parameter
* System file monitor
  Tripwire scans your server and add key attribute of import system files, when any file change/delete/add will notice admin by email
** mail server
   install postfix
   configure /etc/postfix/main.cf set inet_interfaces to localhost
   systemctl restart postfix
** Tripwire
   apt install tripwire
   tripwire --init
   edit /etc/tripwire/twcfg.txt then execute twadmin --create-cfgfile --site-keyfile site.key twcfg.txt
   edit /etc/tripwire/twpol.txt then execute twadmin --create-polfile twpol.txt
   delete /etc/tripwire/twcfg.txt and /etc/tripwire/twpol.txt file(tw.cfg and tw.pol is encrypt binary file)
   twadmin --print-cfgfile and twadmin --print-polfile can geneate txt content from tw.cfg and tw.pol
   tripwire -m c, execute check command
   tripwire -m u -r <file>, update database from scan result(/var/lib/tripwire/report)
* Network File System(NFS)
** server
   1. apt install nfs-kernel-server
   2. edit /etc/exports config file
   3. exportfs, let nfs adopt new settings
   4. exportfs, show current exposed
** client
   1. apt install nfs-common
   2. mkdir -p /nfs/home
   3. mount <ip>:<path> /nfs/home
** windows
   use samba share linux file system to windows
* Troubleshooting performance issue
** CPU 
   cpu load average is from 0, for 1 core processor, 1 means fully usage, bigger than 1 means some process wait cpu
   cat /proc/cpuinfo | grep processor, check cpu core number
   you can set process nice value, range from -20 to 19, higher value means grab less resource
** Memory
** Storage
   space limit
   inode number limit
   find . -xdev -type f | cut -d "/" -f 2 | sort | uniq -c | sort -n, show every directory subfile number
   dpkg --configure -a, remove older directory free inode
** network
   iftop, show network traffic with ip
   nethogs, show network traffic with pid
   tc, controll network bandwith
** Monitor
   nmon is a multi-target system monitoring and benchmarking tool
   nmon use short key to show/hide monitor
   nmon -f -s 30 -c 120, save collected data every 30 seconds over a full hour(120 * 30 seconds)
* Network Address Translation(NAT)
  three NAT address range: 10.0.0.0 <-> 10.255.255.255, 172.16.0.0 <-> 172.31.255.255, 192.168.0.0 <-> 192.168.255.255
  Classless Inter-Domain Routing(CIDR) present subnet netmask, e.g 192.168.1.0/24, 24 means first 3 octets make up the network portion
** Assign Ip address
   ip route add default via <ip> dev <device>, add route to device
   dhclient <device>, dhcp get ip address
   ubuntu ip config file is /etc/network/interfaces
   centos ip config file is /etc/sysconfig/network-scripts/ifcfg-<dev>
   systemctl restart networking restart network service
* Hardware troubleshooting
  use lshw and other command check is hardware connected
  to create an effective balance between the opposing virtues of stability and usability, linux isolates the kernal and let you add function on the fly through loadable kernal modules(LKMs)
  kernel module is location on /lib/modules/<linux kernel version>, file extension is ko(kernel object)
  grub can pass parameters to kernel mod when start
* CUPS(Common Unix Printer System)
  The CUPS modular printing system has been adopted by many, if not all, Linux distributions to manage printers and printing
  The major printer manufacturers now generally provide Linux drivers
  Starting with release 17.04, Ubuntu now offers driverless printing
  localhost:631 is CUPS manage page
  troubleshooting:
  + systemctl status cpus, check logs
  + lsusb and lpinfo -v, check is system can see printer
  + make shure /etc/cups/printers.conf no duplicate printer
  + Make sure that the <Policy default> section of the /etc/cups/cupsd.conf file doesn’t have any overly restrictive settings that might be blocking legitimate requests.
* DevOps
  popular deployment orchestrators:
  - puppet
  - chef
  - ansible
  - salt
** Ansible
   fast connections work via SSH
   Run via text-based files (called playbooks)
   andible get information about which host to manage from /etc/ansible/hosts file
   /etc/ansible/ansible.cfg controll authentication
   Playbook is ansible configure way to controll orchestrate
*** Install
    apt install software-properties-common
    add-apt-repository ppa:ansible/ansible
    apt update
    apt install ansible
*** Cli
    #+BEGIN_SRC bash
    ansible <target> -m ping # test is all service reachable, target can be all or group in /etc/ansible/hosts file
    ansible <target> -a "<command>" # execute command in servers
    ansible <target> -m copy -a "src=/home/ dest=/etc" # execute copy local to remote
    ansible-playbook <yml file> # execute playbook from yaml file
    ansible-vault create <file> # create vault store sensitive data
    #+END_SRC
* Regular Expression
  basic regular expressions: ^ $ . [ ] * are special character, other is literal
  extended regular expression, following meta-characters added: ( ) { } ? + |
