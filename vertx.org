* Maven plugin
  [[https://reactiverse.io/vertx-maven-plugin/]]
** Maven Goals
*** vertx:setup
    #+BEGIN_SRC bash
   mvn io.reactiverse:vertx-maven-plugin:1.0.18:setup # add mevn plugin to pom
   mvn io.reactiverse:vertx-maven-plugin:1.0.18:setup -DprojectGroudId=<group> -DprojectArtifactId=<project> \
     -DprojectVersion=<version> -Dverticle=<verticle> -Ddependencies=web,jmx,mongo # initiliaze a maven project
    #+END_SRC
*** vertx:initialize
    copy js dependencies to the webroot directory
    unpack webjars dependencies to the webroot directory
    initilize the recording of the build used of the redeployment
*** vertx:package
    package a vert.x application as a fat jar
*** vertx:run
    allow run Vert.x application as part of maven build
*** vertx:debug
    allow to debug vert.x application
*** vertx:start
    allow to start the vert.x application as a background process for maven build
*** vertx:stop
* Gradle plugin
  [[https://plugins.gradle.org/plugin/io.vertx.vertx-plugin]]
* Vert.x Cluster Configuration
  start vertx with --cluster -Djava.net.preferIPv4Stack=true, start vertx as cluster with multicast network support
  By default, the Vert.x cluster manager based on Infinispan uses multicast. If your network does not support multicast, you can configure Infinispan to use another discovery protocol such as unicast.
  Infinispan is based on JGroups, and to configure the discovery, you must provide a `jgroups.xml` file in the application `CLASSPATH`.
  The `jgroups.xml` file available in this directory is configured to use unicast on 127.0.0.1. You will only discover applications running on the same machine. To use this configuration, just copy the file to the 
  `src/main/resources` directory of your source code.                                                                    
** JGroups
   #+BEGIN_SRC xml
<?xml version="1.0" encoding="UTF-8"?>
<!--

 This jgroup configuration discovers only nodes running on the local machine using the 127.0.0.1 local address.
 It does not use multicast, but unicast.

-->
<config xmlns="urn:org:jgroups"
        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xsi:schemaLocation="urn:org:jgroups http://www.jgroups.org/schema/jgroups-4.0.xsd">
  <TCP bind_addr="127.0.0.1"
       bind_port="7800"
  />
  <TCPPING port_range="5"/>
  <MERGE3 min_interval="10000"
          max_interval="30000"
  />
  <FD_SOCK/>
  <FD_ALL timeout="60000"
          interval="15000"
          timeout_check_interval="5000"
  />
  <VERIFY_SUSPECT timeout="5000"/>
  <pbcast.NAKACK2 use_mcast_xmit="false"
                  xmit_interval="1000"
                  xmit_table_num_rows="50"
                  xmit_table_msgs_per_row="1024"
                  xmit_table_max_compaction_time="30000"
                  resend_last_seqno="true"
  />
  <UNICAST3 xmit_interval="500"
            xmit_table_num_rows="50"
            xmit_table_msgs_per_row="1024"
            xmit_table_max_compaction_time="30000"
            conn_expiry_timeout="0"
  />
  <pbcast.STABLE stability_delay="500"
                 desired_avg_gossip="5000"
                 max_bytes="1M"
  />
  <pbcast.GMS print_local_addr="false"
              join_timeout="${jgroups.join_timeout:5000}"
  />
  <MFC max_credits="2m"
       min_threshold="0.40"
  />
  <CENTRAL_LOCK use_thread_id_for_lock_owner="false" bypass_bundling="true"/>
  <COUNTER bypass_bundling="true"/>
</config>

   #+END_SRC
** Service Discover
   Client-side service discover is client require real address from register, then use this address, should handle service withdraw
   Server-side servie discover is client get a virtual address , a load balancer/proxy will handle this virtual address to real address
   vertx use ServiceDiscover to Publish/retrive service
** Circual breaker
   when service is not healthy, circual breaker change to open state, after some time it become half-open to try is service health, if it is change back to close state, otherwise change to close state
   most well-known circuit breaker implementation in java is Hystrix
   vertx built in circuit breaker, use CircuitBreaker to build
** Health check and Failover
   vertx use HealthCheckhandler to register health check
        
* Core
  vertx core is Vertx instance, it is control center
  vertx api is fluent
  don't block event loop
  nodejs is reactor execute model, vertx is Multi-reactor execute model, there are mutliple event loop, in most case vertx instance will execute in same event loop
  vertx will show wanring when you code block event loop time excceed setting time
  use vertx.createSharedWorkerExecutor().executeBlocking(future -> { <some code then call future>}, res -> }) to execute block code in event loop, then the worker need clode when it not be need
  several wokers used same name will share same pool, when all worker shared same pool destoryed, the pool destoryed
  CompositeFuture.all used to combine several future execute result, same like RxJava.zip
  CompositeFuture.any, if any future sueccess, it will success
  CompositeFuture.join, wait all future complete, success if all succeed, failed if all complete and at least one failed
  compise use to chain future, same like flatMap
** Verticle
  Verticles is a simple, scalable, actor-like deployment and concurrency model, vertx not force you use this model
  different verticle communicated with send message to event bus
  when deploy vertx from program, it support depoloy different type language write verticle, there are 3 rule, if start with language name and colon, it will try deploy whit language verticle,
  if not start with language name and colon, will try use suffix to recgonize language, otherwise will assume this name is full java class name
  verticle isolation groups used to isolate classpath file, e.g. deploy different version of verticle with same name, same library with different version
  use -ha to enable high available, it auto enable cluster mode, verticle will auto redeployment and fail over
  use vertx command can direct run verticle
  verticle is associated with a Context, use getOrCreateContext() to create or get a context, context.runOnContext will async execute in context
  context.put and get used to share data in context
  three different type of verticles:
  one shot timer, vertx.setTimer(<time>, <execution>), after delay execute
  periodic timer, vertx.setPeriodic(<duration>, <execution>), execute period, use vertx.cancelTimer to cancel, timer will auto clean when verticle undeploy
*** Standard Verticle 
    most common and useful type, they always executed using an event loop thread
    standard verticle are assign an event loop when created, call any method take a handler on core api will always run on same event loop
*** Worker Verticle 
    run using a thread from woker pool. An instance is nerver executed concurrently by more than one thread
*** Multi-threaded worker verticles 
    these run using a threaded from the work pool, An instance can be ececuted concurrently by more than one threaded
** Event Bus
   there is a single event bus instance for every Vert.x instance 
   message are send to an address, any string is a valid address
   one handler can register to many different address, one address can register many different handler
   support publish/subscribe message mode, use event.publish
   support point-to-point and request-response message mode, use event.send
   message receiver can use  reply callback to notify sender
   sender can set timeout in DeliverOptions, if timeout result handle will be failed
   register a codec then set on DeliverOptions can send custom object to event bus
