* tables
  each table has its own set of built-in chains
** filter
   mainly used for filter packets
** nat
   only used to change package source/destination field
   include target:
   - DNAT
   - SNAT
   - MASQUERADE, like SNAT, but when this  target hit, it automatically check for ip address to use insted of snat static ip
** mangle
   used to mangle package filed: TOS TTL MARK SECMARK CONNSECMARK
** raw
   only used for set a mark on packets that they should not be handled by the connection tracking system
* chains
  [[./images/iptables.png]]
  [[./images/iptables-2.png]]
  when packet match chain, we can specify a ump rule to a different chian within same table, new chain must be userspecified
** INPUT
** OUTPUT
** FORWARD
** PREROUTING
** POSTROUTEING

* command options
  - --source -s, match on a source ip address or network
  - --destination -d, match on a destination ip address or network
  - --protocol -p, match on an ip value
  - --in-interface -i, input interface
  - --out-interface -o, output interface
  - --state, match on a set of connection states
  - --string, match on a sequence of application layer data bytes
  - --comment, associate up to 256 bytes of comment data with a rule within kernel memory
* target
  - ACCEPT allow a package to continue on its way
  - DROP drops a packet. Not further processing is performed, and as far as the receiving stack is concerned, it is as though the packet was never sent.
  - LOG logs a packet to syslog
  - REJECT drops a packet and simulaneously sends an appropriate response packet(e.g., a tcp reset packet for a tcp connection or an iCMP Port Unreachable messafe for a UDP packet).
  - RETURN Continues processing a packet within the calling chain.
* redsocks
[[https://github.com/darkk/redsocks]]
[[https://gist.github.com/ChronoMonochrome/7ce4e0f4eba9c1ee7521774e7b7e504a]]
  #+BEGIN_SRC bash
#!/bin/bash
# Create new chain
iptables -t nat -N REDSOCKS

# Ignore LANs and some other reserved addresses.
iptables -t nat -A REDSOCKS -d 0.0.0.0/8 -j RETURN
iptables -t nat -A REDSOCKS -d 10.0.0.0/8 -j RETURN
iptables -t nat -A REDSOCKS -d 127.0.0.0/8 -j RETURN
iptables -t nat -A REDSOCKS -d 169.254.0.0/16 -j RETURN
iptables -t nat -A REDSOCKS -d 172.16.0.0/12 -j RETURN
iptables -t nat -A REDSOCKS -d 192.168.0.0/16 -j RETURN
iptables -t nat -A REDSOCKS -d 224.0.0.0/4 -j RETURN
iptables -t nat -A REDSOCKS -d 240.0.0.0/4 -j RETURN

# Anything else should be redirected to port 12345
iptables -t nat -A REDSOCKS -p tcp -j REDIRECT --to-ports 12345

# Any tcp connection made by `root' should be redirected, put your username here.
iptables -t nat -A OUTPUT -p tcp --dport 443 -j REDSOCKS
iptables -t nat -A OUTPUT -p tcp --dport 80 -j REDSOCKS
iptables -t nat -A PREROUTING -s 172.17.0.0/16 ! -d 172.17.0.0/16 -p tcp --dport 80 -j DNAT  --to 184.1.11.231:12345
iptables -t nat -A PREROUTING -s 172.17.0.0/16 ! -d 172.17.0.0/16 -p tcp --dport 443 -j DNAT  --to 184.1.11.231:12345
  #+END_SRC
* state
  connectiion tracking is done by kernel module conntrack
  incomming connection tracking is handled in the PREROUTING chain of nat table
  local generated packets handled in the OUTPUT chain of nat table
** NEW
   packet is first packat that we see
** ESTABLISHED
   has seen traffic in both directions
** RELATED
   connection related to ESTABLISHED connection, e.g ftp data connection to ftp control connection
** INVALID
** UNTRACKED
   if packet is marked with the raw table with the NOTRACK target, then on this state
   
    
