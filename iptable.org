* tables
  each table has its own set of built-in chains
** filter
   mainly used for filter packets
** nat
   only used to change package source/destination field
   include target:
   - DNAT
   - SNAT
   - MASQUERADE, like SNAT, but when this  target hit, it automatically check for ip address to use insted of snat static ip
** mangle
   used to mangle package filed: TOS TTL MARK SECMARK CONNSECMARK
** raw
   only used for set a mark on packets that they should not be handled by the connection tracking system
* chains
  [[./images/iptables.png]]
  [[./images/iptables-2.png]]
  when packet match chain, we can specify a ump rule to a different chian within same table, new chain must be userspecified
** INPUT
** OUTPUT
** FORWARD
** PREROUTING
** POSTROUTEING

* command options
** command
  - -t, table, default filter table is used
  - --append, -A, appends rule to end of the chain
  - --delete, -D,  delete a rule in a chain, either by entering the whole rule to match or by specifying the rule number, number start top from 1
  - --replace, -R, replaces the old entry at the specified line
  - --insert, -I, insert a rule smoewhere in a chain
  - --list, -L, lists all the entries in the specified chain
  - --flush, -F, flushes all rules from the specified chain and is equivalent to deleting each rule one by one
  - --zero, -Z, zero all counters in a specific chain
  - --new-chain, -N, create a new chain of  the specified name in the specified table
  - --delete-chain, -X, deletes the specified chain from the table
  - --policy, -P, set a specified default target or policy on a chain
  - --rename-chain, -E, change the first name of a chain to a second name
  - --verbose, -v, used in --list --append --insert --delete --replace
** general match
  - --source --src -s, match on a source ip address or network, support ! inversed match
  - --destination --dst -d, match on a destination ip address or network, support ! inversed match
  - --protocol -p, check for certain protocol, all protocol list in /etc/protocols, use ! inversed match
  - --in-interface -i, input interface, only legal in the INPUT FORWARD and PREROUTING, + means all, support eth+, support ! inversed match
  - --out-interface -o, output interface, only legal in the OUTPUT FORWARD and POSTROUTEING
  - --fragment -f, match the second and third part of a fragmented packet
** tcp match 
  need set --protocol tcp
  - --source-port --sport, match packaet base on their source port, either be number of name from /etc/services, support range <start port>:<end port>, emit first means 0, emit last means 65536, from big to small means reverse(eg 80:22), support ! inversed match
  - --destination-port --dport, match destination port
  - --tcp-flags, SYN,FIN,ACK,RST,URG,PSH support inversed match
  - --sync, backward compatibility, used match SYN bit set and the ACK and RST bit unset
  - --tcp-options
** UDP match
   need set --protocol udp
   - --source-port -sport, same as tcp
   - --destination-port -dport, same as tcp
** ICMP match
   need set --protocol icmp
   - --icmp-type, match icmp type by their numbric value or name, support ! inversed match
** SCTP match
   need set --protocol sctp
   - --source-port --sport, same as tcp/udp
   - --destination-port --dport, same as tcp/udp
   - --chunk-types, match chunktype of the sctp packet
** explicit match
*** addrtype match
    use -m addrtype enable
    avialable type: anycast blackhole broadcast local multicst nat prohibit throw unicast unreachable unspec xresolve
    - --src-type
    - --dst-type
*** ash/esp match
    match are used for the ipsec ah and esp protocols
    use -m ah or -m msp enable
    - --ahspi, match AH security Parameter Index number of the AH packets
    - --espspi, match Security Parameter Index number of the ESP packets
*** comment match
    add comments inside the iptables ruleset and the kernel
    use -m comment enable
    - --comment, associate up to 256 bytes of comment data with a rule within kernel memory
*** connmark match
    --mark, match specific mark associated with a connection
*** contract match
    use -m conntrack enable
    - --ctstate, match state of a packet, INVALID ESTABLISHED NEW RELATED SNAT DMAT, support ! invert match
    - --ctproto, same as --protocol does
    - --ctorigsrc, match original source ip specification of the contrack entry
    - --ctorigdst
    - --ctreplsrc, match base on the original contrack reply source
    - --ctrepldst
    - --ctstatus, match status of the connection, NONE EXPECTED SEEN_REPLY ASSURED
    - --ctexpire, match on packets base on how long is left on the expiration timer
*** Dscp match
    use -m dscp enable
    - --dscp
    - --dscp-class
*** Ecn match
    use -m ecn enable
    - --ecn, match the CWR(COngestion Window Received) bit
    - --ecn-tcp-ece, match ECE(ECN-Echo) bit
    - --ecn-ip-ect, match ECT(ECN Capable Transport) codepoints
*** Hashlimit match
    use -m hashlimit enable
    - --hashlimit, specifies limit of each bucket, e.g 1000/sec, limit can take a /sec /minute /hour or /day postfix
    - --hashlimit-mode, specifies which values should use as the hash value, support dstip(Destination IP), srcip(Source ip), dstport(Destination port), srcport(Source port)
    - --hashlimit-name, specifies the name that this specific hash will be available as
    - --hashlimit-burst, same as --limit-burst, set maimum size of the bucket
    - --hashlimit-htable-size, maximum availabel buckets to be used
    - --hashlimit-htable-max, set maximum number of hashtable entries
    - --hashlimit-htable-gcinterval, how often should the garbage collection function be run
    - --hashlimit-htable-expire, how long time an idle hashtable entry should expire
*** helpoer match
    use -m helper enable
    - --helper
*** ip range match
    use -m iprange enable
    - --src-range, match a range of source ip addrss
    - --dst-range
*** length match
    use -m length enable
    --length, match packet length in range
*** limit match
    use -m limit enable
    - --limit
    - --limit-burst
*** Mac match 
    match Ethernet MEdia Access Control source address
    use -m mac enable
    - --mac-source, match packets based on their MAC source address, only valid in the PREROUTING, FORWARD and INPUT chains
*** mark match 
    mark is setting by MARK target, mark is an unsigned 32 bit integer
    use -m mark enable
    - --mark, match packets that have prviously been marked
*** multiport match
    can't mixing starnd matching and multiport matching same time
    use -m multiport enable
    - --source-port, match multiple source port
    - --destination-port, match multiple destination port, a maximum of 15 separate ports mayb e specified
    - --port, match source and destination port
*** owner match
    only works within the OUTPUT chain
    use -m owner enable
    - --cmd-owner, command owner match, match based on the command name of  the process that is sending the packet
    - --uid-owner,  match packet by User ID
    - --gid-owner, match packet by Group ID
    - --pid-owner, match packet by Process ID
    - --sid-owner, match packet by session ID
*** packet type match 
    use -m pkttype enable
    - --pkt-type, unicast broadcast or multicast
*** realm match
    A routing realm is used in Linux to classify routes into logical groups of routes.
*** recent match
    use -m recent enable
    - --name, name of the list to use
    - --set, create a new list entry in the named recent list
    - --rcheck, check if the source ip address of packet is in the named list
    - --update,  this match is true if the source combination is available in the specified list and it also updates the last-seen time in the list
    - --remove, this match will try to find the source address of the packet in the list, and returns true if the packet is there. It will also remove the corresponding list entry from the list
    - --seconds, only valid together with --check and --update matche, if last seen column was order than this amount in seconds, match return false
    - --hitcount, used with --check or --update matches and will limit the match to only include packets that have seen at least the hitcount amount of packets.
    - --rttl, verify TTL value of current packet same as the original packet
    - --rsource, save source anddress and port
    - --rdest, save the destination address and port to recent list
*** state match
    use -m state enable
    - --state, match on a set of connection states
*** tcpmss match
    match a packet based on the Maximum Segment Size in TCP
    use -m tcpmss enable
    - --mss
*** tos match
    use -m tos enable
    - --tos, match on tos field value
*** ttl match 
    use -m ttl enable
    - --ttl-eq
    - --ttl-gt
    - --ttl-lt
*** unclean match
    The unclean match tries to match packets that seem malformed or unusual
* utils
** iptables-save
   save current iptables rule to file
   -c means keep byte/packet counter, -t special table
   format:
   *<table-name>
   :<chain-name> <chain-policy> [<packet-counter>:<byte-counter>]
** iptables-restore
   load rule from iptables-save
   -c means keep byte/packet counter from input, -n means not flush current rule
* target
** ACCEPT
   when use ACCEPT as target, the rule is accepted and will not continue traversing the current chain or any other ones in the same table
** CLASSIFY
   only valid in the POSTROUTING chain, used by couple of different qdiscs
   - --set-class
** CLUSTERIP
   used to create simple clusters of nodes answering to the same IP and MAC address in a round robin fashion
** CONNMARK 
   used to set a mark on a whole connection, available in all chains and all tbales, but nat table is only traversed by the first packet in a connection
   - --set-mark, set a mark on the connection
   - --save-mark, save the packet mark into the connection mark
   - --restore-mark, restore packet mark from the connection mark
   - --mask
** CONNSECMARK
   set a SELinux security context mark to or from a packet mark
** DNAT
   used to do destination Network Addresss Translation
   only valid in PREROUTING and OUTPUT chains in the nat table
   - --to-destination, support set host(range) and port(range)
** DROP
   drops a packet. Not further processing is performed, and as far as the receiving stack is concerned, it is as though the packet was never sent.
   none any other table and chains see this packet
** DSCP
   set Differentiated Services Field on tcp header
** ECN
   used to set ecn value
** LOG
   logging detailed information about packets, save to syslogd
   - --log-level
   - --log-prefix, prefix all log messag with a specific prefix
   - --log-tcp-sequence
   - --log-tcp-options
   - --log-ip-options
** MARK
   only valid in the mangle table
   mark set is by record in kernel not in packet self
   - --set-mark
** MASQUERADE
   basically same as SNAT, but no --to-source options, it made to work with dynamic get ip
   only valid in POSTROUTING chain in the nat table
   - --to-ports
** MIRROR
   has security issue and remove in kernel 2.6
** NETMAP
   new implementation of the SNAT and DNAT target
   - --to, translate between ip
** NFQUEUE
   sending packets for separate and specific queues
** NOTRACK
   turn off connection tracking, only valid in raw table
** QUEUE
   queue packets to User-land programs and applications
** REDIRECT
   used to redirect packets and streams to machine itself
   only valid in PREROUTING and OURPUT chains of the nat table, also valid with user-defined chains that are called by previous chain rule
   - --to-ports
** REJECT 
   drops a packet and simulaneously sends an appropriate response packet(e.g., a tcp reset packet for a tcp connection or an iCMP Port Unreachable messafe for a UDP packet).
   only valid in INPUT FORWARD and OUTPUT chains and sub chains
   - --reject-with
** RETURN
   will cause the current packet to stop traveling through the chain where it hit the rule. If it is the subchain of another chain, the packet will continue to travel through the superior chains as if nothing had happened
** SAME
   same as SANT, but will try to always use the same outgoing IP address for all connections initiated by a single host on your network.
   - --to
   - --nodst
** SECMARK
   used to set a security context mark on a single packet
** SNAT
   used to do Source Network Address Translation
   only valid in POSTOUTING of nat table
   - --to-source
** TCPMSS
   can be used to alter the MSS (Maximum Segment Size) value of TCP SYN packets
   - --set-mss
   - --clamp-mss-to-pmtu
** TOS
   used to set the Type of Service field within the IP header
   - --set-tos
** TTL
   used to modify the Time To Live field in the IP header
   onlyc valid with mangle table
   - --ttl-set
   - --ttl-dec
   - --ttl-inc
** ULOG
   used to provide user-space logging of matching packets
   - --ulog-nlgroup, tell ulog target with netlink group to send the packet to
   - --ulog-prefix
   - --ulog-cprange
   - --ulog-qthreshold
* redsocks
[[https://github.com/darkk/redsocks]]
[[https://gist.github.com/ChronoMonochrome/7ce4e0f4eba9c1ee7521774e7b7e504a]]
  #+BEGIN_SRC bash
#!/bin/bash
# Create new chain
iptables -t nat -N REDSOCKS

# Ignore LANs and some other reserved addresses.
iptables -t nat -A REDSOCKS -d 0.0.0.0/8 -j RETURN
iptables -t nat -A REDSOCKS -d 10.0.0.0/8 -j RETURN
iptables -t nat -A REDSOCKS -d 127.0.0.0/8 -j RETURN
iptables -t nat -A REDSOCKS -d 169.254.0.0/16 -j RETURN
iptables -t nat -A REDSOCKS -d 172.16.0.0/12 -j RETURN
iptables -t nat -A REDSOCKS -d 192.168.0.0/16 -j RETURN
iptables -t nat -A REDSOCKS -d 224.0.0.0/4 -j RETURN
iptables -t nat -A REDSOCKS -d 240.0.0.0/4 -j RETURN

# Anything else should be redirected to port 12345
iptables -t nat -A REDSOCKS -p tcp -j REDIRECT --to-ports 12345

# Any tcp connection made by `root' should be redirected, put your username here.
iptables -t nat -A OUTPUT -p tcp --dport 443 -j REDSOCKS
iptables -t nat -A OUTPUT -p tcp --dport 80 -j REDSOCKS
iptables -t nat -A PREROUTING -s 172.17.0.0/16 ! -d 172.17.0.0/16 -p tcp --dport 80 -j DNAT  --to 184.1.11.231:12345
iptables -t nat -A PREROUTING -s 172.17.0.0/16 ! -d 172.17.0.0/16 -p tcp --dport 443 -j DNAT  --to 184.1.11.231:12345
  #+END_SRC
* state
  connectiion tracking is done by kernel module conntrack
  incomming connection tracking is handled in the PREROUTING chain of nat table
  local generated packets handled in the OUTPUT chain of nat table
** NEW
   packet is first packat that we see
** ESTABLISHED
   has seen traffic in both directions
** RELATED
   connection related to ESTABLISHED connection, e.g ftp data connection to ftp control connection
** INVALID
** UNTRACKED
   if packet is marked with the raw table with the NOTRACK target, then on this state
   
    
